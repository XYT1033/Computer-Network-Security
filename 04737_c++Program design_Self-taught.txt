






  2、 C++的标识符由字母、下划线和数字组成，而且第一个字符不能为数字，int为关键字，标识符不能与关键字同名 
  
  
  
  3、 下列表达式中不能拿作为左值(赋值运算符左侧)的是：
  C. f(a,b)     D. &a 
  
  
  解析： &a 为取值变量的地址，不能被修改，故不能作为左值。
  
  4、在c++中使用流进行输入输出，其中用于键盘输入的对象是：  cin 
  
  
  
  解析： cin为标准输入，即键盘输入；cout为标准输出，即屏幕输出。
  
  5、  c++ 程序中由new分配的动态内存空间必须通过delete释放
  
  
  
  6 、 对象是类的一个实例， 一个类只能有一个名字 ， 类和对象的关系与数据类型和变量的关系相似  
  
  
  
  7、 c++有两种注释方式，一种是从"/*"开始，直到"*/"结束。
  另一种是"//"，注释的有效范围从"//"至本行结束。 
  
  
  
  
  
  
  8、 c++程序的执行总是从 main函数 开始的。 
  
  
  9、 已定义了一个类A并有语句A * pa=new A(5);,那么下列说法正确的是:   该语句会创建A类的一个对象，并将此对象的地址赋给指针pa   
  
    解析;   通过使用new 调用构造函数创建一个对象，并将此对象的地址赋值给指针pa.   要注意与 
	A* pa = new A[5];   进行区别，A * pa=new A[5]; 是创建5个对象。
	
	
	
	
	
	10， 设存在函数int sum(int,int) 返回两个参数的和，若求20、45、100三个数的和，下列表达式不正确的是:
	A . int m=sum(20,45,100);        B. int m=sum(sum(20,45),100);
	
	解析：A   函数返回值作为函数的参数，该返回值类型必须与参数的类型一致，sum函数只有两个参数，而A有三个，故A错
	
	
	
	11、使用输入输出操控符setw,可以控制 : 输出宽度 
	
	 解析： setw设置输出宽度，setfill设置填充字符，setprecision设置输出精度，setiosflags设置指定的标志位  
	 
	 
	 
	 12、  下了IE数组的定义中，错误的是：
	 B. char ca2[6]="name";     c.char ca3[4]="your";
	 
	 解析： c  字符数组不能超过数组长度，双引号括起来的字符串，最后有一个结束标志'\0',也占一个字符空间  
	 
	 
	 13、 在c++中，数据封装要解决的问题是: 防止非法访问  
	 解析： 封装把成员函数和数据成员设定不同权限，外界只能通过该对象的共有成员函数访问其成员，使得成员安全。 
	 
	 14、 下列有关设置函数参数值的描述中，正确的是 
	 A. 设置了默认值的参数右边允许出现没有指定默认值的参数  
	 B. 参数默认值的设置顺序从参数表的左端开始 
	 C. 参数默认值要设置在定义语句中，不能设置在声明语句中 
	 D。 参数默认值可以是数值也可以是表达式 
	 
	 
	 
	 答：   D。  如果一个函数中有多个参数，则默认参数应从右至左逐个定义，A、B错误。 
	 参数默认值可以设置在声明语句中，如在函数原型中指定默认参数，C错误。
	 
	 
	 
	 
	 15、  下列模板定义中不正确的是:
	 A. template <class Q>Q F(Q x){return Q+x};   B.  template <class Q>Q F(Q x){return x+x};
	 
	 答： A      Q 是数据类型，不是变量，所以不能作为返回值 。 
	 
	 
	 16、 下面属于重载函数的有： 
	   b. int f(int y)(...)
	   c. int f(int i,int j)(...)
	   
	   答： C      重载函数的函数名相同，但至少要在参数个数或参数类型上有所不同。
	   
	   
	  17. 内联函数的特点是： 增加代码量，加快访问速度。 

      18、 设int & max(int &,int &)返回两参数中较大者，如有两整型变量int a=5;int b=10;在执行max(a,b)++  后，
	  a,b的值分别为;       5,11 
	  
	  答：C  执行max(a,b)++ 后，函数返回变量b后加1，即b=11.
	  因为函数参数采用的是引用方式，所以改变的是实参变量b的值。
	  
	  
	  19. 多态性是指不同的对象可以调用相同名称的函数，但可导致完全不同的行为。 
	  
	  
	  20.  c++ 对c 语言做了很多改进，即从面向过程变成为面向对象的主要原因是:
	       引进了类和对象的概念。  
		   
		   
		   
		21.  c++中只有两个逻辑常量:true和 false  

      22、  #include 指令指示编译器将一个源文件嵌入到带该指令的源文件之中。 

			 23、 对数组进行升幂排序、反转、复制数组的内容等操作需要包含头文件: <algorithm> 
			 
			 24、 如果调用函数时，需要改变实参或者返回多个值，应该采取(传地址值)方式 
			 
			 25、 使用关键字(inline)说明的函数是内联函数 。
			 
			 26、 c++ 结构体中的成员默认访问权限为(public)
			 
			 27、 函数fun的返回值是一个整型数据的引用，有两个参数都是int,声明fun函数的原型是:         int & fun(int,int);
			 
			 
			 
			 28、程序需要执行键盘输入时，使用 >>提取  运算符  
			 
			 29、 c++ 程序一般可以分为4个部分：程序的主函数、全局说明、预处理指令和哦用户自定义的函数。 
			 
			 
			 31、 决定c++语言中函数返回类型的是：   定义函数时的数据类型  
			 
			 32、 目前，有两种重要的程序设计方法，分别是结构化程序设计和面向对象程序设计。 
			 
			 
			 
			 33、 c++语言支持引用，实际上就是变量的别名。 
			 
			 34、 c++ 提供了两种格式控制方式：使用 ios_base 类提供的接口和使用带操作符的特殊函数。 
			 
			 
			 35、   在结构体中定义的函数称为 成员函数  
			 
			 36、 设在程序中使用如下语句申请一个对象数组：
			 Shape * p1=new Shape[3];
			 则在需要释放p1指向的数组对象时，使用的语句是：    delete [] p1; 
			 
			 
			 
			 37、 在c++标准库中，使用 complex 类来表示复数  
			 
			 
			 38、 c++语言提供的基本控制结构可以分为3种类型：顺序结构、选择结构和循环结构 
			 
			 39、 类的继承是指派生类继承基类的数据成员和成员函数。
			 
			 
			 
			 40、 在STL库中用于查找数组内容的函数是： find  
			 
			 
			   
			   
			   
			   单元二 
			   
			   
			   
			   
1.  系列关于构造函数的描述中，错误的是： 
C。  构造函数可以是 内联函数  
D  构造函数不可以重载 

答： D  	 构造函数可以设置默认的参数、构造函数在定义类对象时自动执行、构造函数可以是内联函数、构造函数可以重载。
			   
			   
2. this指针本身可直接作为成员函数的返回值。
			   
			
  3.  下列关于复制构造函数的说法中错误的是： 
A。  复制构造函数是一种特殊的构造函数，  函数名与类名相同 
B 。   若自定义派生类的复制构造函数，那么也必须自定义基类的复制构造函数 
C。  复制构造函数只能有一个参数 
D。  复制构造函数不允许在函数体中使用 return 语句 

答：  B    赋值构造函数是一种特殊的构造函数， 函数名与类型相同， 且不能指定函数返回类型； 复制构造函数只有一个参数， 是对同类的某个对象的引用。  





   4.   下列哪种情况不属于函数重载  
   
   A。   类中定义的运算符函数 
   B   同一个明早，参数个数不同 
   C  派生类中重新定义了一个和基类中的原型完全相同的函数 
   D   类中定义了两个同名、 同参数表的函数， 但其中一个是常成员函数  
   
   
   答： C  
   
   
   
   
   
   
   
   5.  下列关于友元的描述中， 错误的是 ；
   A。  友元函数可以访问该类的私有数据成员 
   B。 一个类的友元类中的成员函数都是这个类的友元函数 
   C .  类与类之间的友元关系可以继承 
   D。   友元可以提高程序的运行效率  
   
   
   答： C    友元关系是不能被继承的 
   
   
   
   
   6.   下述静态成员的特性中，错误的是：
   A 。 静态成员函数不能利用 this 指针 
   B 金泰数据成员要在类体外进行初始化 
   C  引用静态数据成员时， 要在静态数据成员名前加<类名>和作用域运算符
   D.   静态数据成员不是所有对象所共有的 
   
   
   答：  D  。    静态成员函数属于 整个类， 是类的所有对象共享的成员函数， 它与一般成员函数不同，没有指向 
   调动该成员函数的对象的 this 指针， A 正确。  
   
     静态数据成员你的初始化应在类体外 进行， B 正确 
	 
	 静态数据成员是属于整个类的， 因此可以不通过对象名， 而直接使用类名和作用域运算符表名其所属的类即可 ， C 正确。   
	 
	 静态数据成员被类的所有对象所共享 D 错 
	 
	 
	 
	 
	 7.  下面列出的基类中的哪部分能被派生类自动继承  
	 
	 A。 基类中的默认构造函数 
	 B .   基类中的虚析构函数 
	 C .   基类中的复制构造函数  
	 D  基类中的常成员函数 
	 
	 答：  D     只要是构造函数、 析构函数都不能被继承。   常成员函数能被自动继承到派生类。 
	 
	 
	 
	 
	 
	 8.  下列有关继承和派生的叙述中，正确的是： 
	 A。   派生类不能访问基类的保护成员 
	 B 。  作为虚基类的类不能被实例化 
	 C.  派生类应当向基类的构造函数传递参数 
	 D。   虚函数必须在派生类中重新实现 
	 
	 
	 
	 答：   C     派生类可以访问基类的保护成员；    抽象类不能被实例化，而作为虚基类的类能被实例化；   虚函数不必 
	 在派生类中重新实现。    
	 
	 
	 
	 
	9.  关于多重继承二义性的描述，错误的是：  
A。  派生类的多个基类中存在同名成员时，派生类对这个成员访问可能出现二义性。

B  一个派生类是从具有共同的间接基类的两个基类派生来的，派生类对该公共基类的访问可能出现二义性 
C 解决二义性最常用的方法是作用域分辨运算符对成员进行限定  
D    派生类和它的基类中出现同名函数时，   将可能出现二义性  


答：   D  





10 .  当 基类本身也是某一个类的派生类时，底层的派生类也会自动继承间接基类的成员，称为继承的：   传递性 



11.  下列说法 不正确的是： 
A。  模版类的基类可以是非模版类 
B     模版类的派生类可以是模版类 
C     根据建立对象时的实际数据类型， 编译器把类模版实例化为模版类 
D   可以从构造函数参数列表推断出


答：  D      模版实例化参数类型包括数据类型和值， 编译器不能从构造函数参数列表推断出模版实例化参数类型， 所以必须显式地给出对象的参数类型。 



12 。   下面关于类模版的派生与集成，描述错误的是： 
A.   类模版可以继承， 继承的方法与普通的类一样 
B 。   声明模版继承之前，  必须重新声明类模版 
C     模版类的基类和派生类不可以是非模版类 
D。     模版类的基类和派生类可以是模块类或非模版类  


答：   c   



13. 下列关于向量的描述中， 不正确的是： 
A。   向量是类模版， 具有成员函数， 但它不可以使用构造类型 
B。   向量可以改变赋值目标的大小 
C       erase(iterator it ) 方法是删除 it 所指向的容器对象 
D.     size()方法指返回当前向量中已经存放的对象的个数  

答： A         向量可以使用构造类型， 它提供了4种构造函数， 用来定义由各元素组成的列表



14.   下列虚基类的声明中正确的是： 
A.     class virtual B:public A 
B.     virtual class B:public A 
C.  class B:public A virtual
D.   class B: virtual public A 


答： D。       定义派生类时在派生方式前加 virtual 关键字， 该类的基类就成了虚基类   




15.    关于虚函数 的描述中， 正确的是： 
A。 虚函数是一个静态成员函数 
B。   虚函数是一个非成员函数 
C. 虚函数既可以在函数说明时定义， 也可以在函数实现时定义 
D.   派生类的虚函数 与基类中对应的虚函数具有相同的参数个数和类型 

答： D       派生类的虚函数 与基类中对应 的虚函数具有相同的函数名、 相同的参数个数和类型。   







16.     关于动态联编的描述中，错误的是： 
A。    动态联编是以虚函数为基础的 
b.   动态联编运行时确定所调用的函数代码 
C.  动态联编调用函数操作是指向对象的指针或对象引用 
D.  动态联编是 在编译时确定操作函数  

答：  D        静态联编在编译时就可确定调用哪个函数，  动态联编是程序运行到需要的语句时才确定的。 



17.  如果一个类至少有一个纯虚函数，  那么就称该类为：   抽象类 


解析：     包含有纯虚函数的类称为抽象类， 一个抽象类只能作为基类来派生新类，不能说明抽象类的对象。  






18.   下列运算符在 c++  中不能重载的是： 
A。     ?:
B. [] 


答：  A          c++ 中， 除了  .   、    .*   、   ->*   、   ::  、 ?:    运算符外， 其他运算符都可以重载 。



19.   在 c++ 的流类库预定义的缓冲方式下， 与标准错误输出设备相联接的是： 
C.   cerr 
D.    clog 


答：     D        cin 与标准输入设备相联接；  cout 与标准输出设备相联接;  
   cerr 与标准错误输出设备相联接 (非缓冲方式 ) ;   clog 与标准错误输出设备相联接 (缓冲方式)  
   
   
   
   
  20.   下列叙述中 ，错误的是： 
A。    bad() 函数功能表示如果进行非法操作， 返回 true , 否则返回 false  
B.  ios_base::in  打开文件用于输入(输入流的打开模式)
C.  ios_base::ate 打开一个已有的输入或输出文件并查找到文件尾 
D。   ios_base::out 打开文件进行读操作 

答：  D       ios_base::out 是打开文件进行写操作  




21.   在类定义时，如果没有定义任何构造函数，则编译器自动生成一个 ( 无参数的默认 ) 构造函数  

22.  析构函数名是在类名前加上  (  ~  ) 符号，   用来释放对象所占的内存空间 

23.  设A 为test 类的对象且赋有初值，  则语句 test B(A);  表示： 用对象A初始化对象B 

24.   静态数据成员初始化时，  前面不加 ( static ) 关键字，  以免与一般静态变量或对象混淆  

25.     在类中声明 const 数据成员时，  只能通过  ( 初始化列表 )  的方式来对该成员进行初始化。 

26.  在建立派生类对象时， 先执行 (  基类 ) 的构造函数。 

27.  赋值兼容规则是指在公有派生情况下， 基类对象 (  能 ) 使用派生类对象。 


28.  在继承机制下， 当对象消亡时， 编译系统执行析构函数的顺序是：  先派生类， 后派生类中子对象类， 最后是基类。 


29.    访问控制权限由 public 、 private 和 protected 3种 

30.    定义派生类时， 若不使用类关键字显式地规定采用何种继承方式， 则默认方式为：  私有 

31.  用来派生新类的类称为： 父类或基类   ， 而派生出的新类称为它的子类或派生类  

32.   类模版中声明的类称为： 模版类  

33.  返回向量中的第1个对象的成员函数是：   front() 


34.  在 c++ 中， 利用向量类模版定义一个具有20个int 的向量A  ,  其元素均被置为5， 实现操作的语句是：  vector <int> A(20,5);

35.  在 c++中，  可将多态性分为： 编译时的多态性和 ( 运行时的多态性 )

36。   至少包含一个 (  纯虚 ) 函数的类称为抽象类  



37.    运算符的重载函数必须使用 (  operator ) 关键字 

38.   (  fstream )  类是从 iostream 类公有派生的， 提供从文件中提取数据或把数据写入到文件的各种操作。 


39。   重载的运算符保持其原有的运算符个数、 (  优先级和结核性 ) 不变


40.   表达式 operator+(x,y)  还可以表示为： (   x+y )  。 





























































  
















  





























	
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  
			   
			   
			   
			   
			   
			   
			   
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
			 
		   
		   
		   
		   
		   
		   
		   
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	
	
	
	
	
	
	
	
	
	
	
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  