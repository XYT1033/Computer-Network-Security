

java语言的前身是(Oak)语言，是美国Sun Microsystems 公司于1991年推出的，仅限于公司内部使用的语言。

java是一种功能强大的程序设计语言，既是(开发环境)，又是(应用环境)，它代表一种新的计算模式。


java语言的特点： 
1、 语法简单，功能强大，安全可靠。
2、与平台无关。
3、 解释编译两种运行方式
4、 多线程
5、 动态执行兼有丰富的API文档及类库 



(JDK)java se development kit,java语言软件开发工具包是原Sun公司提供的软件包，其中含有编写和运行java程序的所有工具，包括组成java环境的基本构件。

下载完毕，找到下载文件所在的目录，双击(jdk-8ul31-windows-x64.exe)直接运行，开始安装JDK。按照安装向导进行安装即可。

安装完成后，需要设置环境变量。环境变量设置完毕。(重启计算机)让这些设置生效。


java程序分为两种,一种是(java应用程序)java application ,另一种是(java小应用程序) java applet ,或叫java小程序。 

java 程序由类构成，含有一个main()方法，称为(主方法或主函数)。程序是通过java解释器来执行的独立程序，可以使用命令行命令直接运行。整个程序的运行入口是(main()方法)，
main()方法执行完毕，整个程序也即结束。 


一个程序可以包含一个或多个.java文件。不论文件个数有多少，其中只能有(一个)main()方法。  


源文件是(文本形式)的文件，java的执行系统是不能识别的，它必须经过编译，生成字节码的类文件后才能运行。类文件是(二进制)格式的，它有统一的格式，JVM可以识别类文件并执行它。


编译一个程序的命令格式是：
javac [选项] 源文件名 

   如果在命令行中输入javac,则系统会显示(所有选项). 这些选项都是可选的。如果源文件不在当前目录，则需要在文件名的前面加上目录。
   
   
   运行一个java程序的命令格式是： 
   java [选项] 程序名 [参数列表]
   
   java是解释器的名字，表示要运行一个由"程序名"指定的程序。程序名也就是类的名字，后面的参数列表是(可选)的。如果想向程序传送参数值，则可以把这些参数依次列在程序名的后面，
   参数个数不限。
   
   
   
   
   
   IDE是集成开发环境的缩写，这是一个提供给(开发人员)使用的程序开发环境，通常包括了(代码编辑器、编译器、调试器)和(图形用户界面)等工具。
   
   
   
   
   jdk 文档中有许多HTML文件，这些是JDK提供的应用程序编程接口(application pro-gramming interface,api)文档，可使用(浏览器)查看。api是原sun公司提供的
   使用java语言开发的类集合，用来帮助程序员开发自己的类和程序。最基本的是(java核心api) 
   
   
   
   
   
   
   
   
   
   核心api文档是按层设计的，以(主页方式)提供给用户。
   
   
   
   
   
   
   所谓(面向对象的方法学)，就是使分析、设计和实现一个系统的方法尽可能地接近人们认识一个系统的方法。通常包括3个方面：(面向对象的分析 object-oriented analysis,OOA)、(面向对象的设计
   object-oriented design,OOD)和(面向对象的程序设计 object-oriented programming, OOP )
   
   
   OOP 技术把问题看成是相互作用的事物的集合，也就是对象的集合。对象具有两个特性，一是(状态)，二是(行为)。状态是指对象本身的信息，行为是实现对对象的操作。 
   
   
   OOP 中采用了三大技术：(封装、继承和多态)。封装体现的特点是将对象的属性及实现细节隐藏起来，只给出如何使用的信息。将数据及对数据的操作捆绑在一起成为类，
   这就是(封装技术)。 
   
   
   
   
   
   
   
   
   
   
   
   在java程序中，(换行符及回车符)都可以表示一行的结束，它们可被看作是(空白)。另外，空格键、水平定位键(Tab)亦是空白。为了增加程序的可读性，java程序的元素之间可以插入任意数量的空白，
   编译器会忽略掉多余的空白。 
   
   
   java的3种注释形式： 
   1、 表示从"//"开始一直到行尾均为注释，一般用它对声明的变量、一行程序的作用进行简短说明。"//"是注释的开始，行尾表示注释结束。 
   
   2、 可用于多行注释，"/*"是注释的开始，"*/"表示注释结束， "/*" 和 "*/"表 之间的所有内容均是注释内容。这种注释多用来说明方法的功能、设计逻辑及基本思想等。
   
   3、 文档注释，以 "/**"开头，以"*/"结束。一般地，在公有类定义或公有方法头的前面会使用这样的注释。 
   
   
   
   (语句)是java程序的最小执行单位，程序的各语句间以分号";"分隔。 
   
   java语言定义了许多关键字，关键字也称为(保留字)。 
   
   
   在java语言中，(标识符)是由字母、数字、下划线(_)或美元符%组成的字符串，其中(数字)不能作为标识符的开头。标识符区分大小写，长度没有限制。除以上所列几项之外，
   标识符中不能含有其他符号，例如+、=、*及%等，当然也不允许插入空白。在程序中，标识符可用作变量名、方法名、接口名和类名等。 
   
   
   
    java的数据类型共分为两大类，一类是(基本数据类型)，另一类是(复合数据类型)。基本数据类型共有8种，分为4小类，分别是(整型、浮点型和布尔型)。整型和浮点型有时也合称为数值型。复合数据
	类型包括(数组、类和接口)。其中，数组是一个很特殊的概念，它是对象，而不是一个类，一般地把它归为复合数据类型。
	
	
	java语言提供了(4种)整型量，对应的关键字分别是：byte、short、int和long .      
	
	
	
	 数据类型   	: 整数长度 : 字节数   : 表示范围
	 byte           : 8位       ： 1       ： -2^7~2^7-1  (-128~127)
	 short           : 16位      ： 2      ： -2^15~2^15-1  (-32768~32767)
	 int            : 32位       ： 4      ：  -2^31~2^31-1  
	 long            : 64位        ： 8    ：     -2^63~2^63-1  
	 
	 
	 
	 
	  整型量可用十进制、八进制或十六进制形式表示，以(1~9)开头的数为十进制数，以(0)开头的数为八进制数，以(0x或0X)开头的数为十六进制数。 
	  
	  
	  
	  java浮点数类型遵从标准的浮点规则。浮点数类型有两种：一种是(单精度浮点数)，用float关键字说明；另一种是(双精度浮点数),用double关键字说明，它们都是有符号数。
	  
	  
	  
	  单个字符用(char)类型表示。一个char表示一个Unicode字符，其值用(16位)无符号整数表示，范围为0~65535。char 类型的常量值必须用一对单引号('')括起来，分为
	  (普通字符常量)和(转义字符常量)两种。 
	  
	  
	  
	   逻辑值有两个状态，它们常被写作on 和off、true 和 false 、yes 和 no 等。在java中，这样的一个值用boolean（布尔）类型表示，布尔类型也称作(逻辑类型)。
	   boolean类型有两个常量值：true 和 false ，它们全是小写，计算机内部使用(8位二进制数)表示。 
	   
	   
	   
	   
	   表达式由(运算符)和(操作数)组成，对操作数进行运算符指定的操作，并得出运算结果。 
	   
	   
	   常量操作数很简单，只有(简单数据类型)和(String类型)才有相应的常量形式。
	   
	   
	   
	   
	   
	   
	    变量是存储数据的基本单元，它可以用作表达式中的操作数。变量在使用之前要先声明。变量声明的基本格式为： 
		类型   变量名1   [=初值1][,变量名2[=初值2]]...;
		其中，类型是变量所属的类型，既可以是简单数据类型，如int和float等，又可以是类类型。有时也把类类型的变量称为引用。方括号
		中的初值是可选的。如果没有，则表明仅是声明了一个变量，否则是在声明变量的同时，给变量赋了初值，称为对变量进行了初始化。 
		
		
		具有null值的引用不指向任何对象。如果使用它指向的对象，则将导致(一个异常)。异常是程序运行时发生的一个错误。
		
		
		(变量的作用域)是指可访问该变量的代码范围。类中定义的成员变量的作用域是整个类。 方法中定义的局部变量的作用域是从该变量的声明处开始到包含该声明的语句块结束处，
		快外是不可使用的。 
		
		
		
		
		1、 (算术运算符)。算术运算符包括通常的加(+)、减(-)、乘(*)、除(/)、取模(%),完成整型和浮点型数据的算术运算。许多语言中的取模运算只能用于整型数，java对此有所扩展，它允许对
		浮点数进行取模操作。 
		
		
		2、 (关系运算符). 关系运算符用来比较两个值，包括大于(>)、大于等于(>=)、小于(<)、小于等于(<=)、等于(==)和不等于(!=)6种。关系运算符都是二元运算符，也就是每个运算符都带有
		两个操作数。运算的结果是一个逻辑值。java允许"=="和"!="两种运算用于任何数据类型。
		
		3、 (逻辑运算符)。逻辑运算符包括逻辑与(&&)、逻辑或(}})和逻辑非(!)。前两个是二元运算符，后一个是一元运算符。java对逻辑与和逻辑或提供"短路"操作功能。
		
		
		
		4、(位运算符)。位运算符用来对二进制进行操作，包括按位取反(~)、按位与(&)、按位或(|)、异或(^)、右移(>>)、左移(<<)及无符号右移(>>>)。位运算符只能对整型和字符型数据进行操作。
		
		
		5、(其他运算符)java 中的运算符还包括扩展赋值运算符(+=、-=、*=、/=、%=、&=、|=、^=、>>=、<<=和>>>=) 、条件运算符(?:)、点运算符(.)、实例运算符(instanceof),new运算符及数组下标
		运算符({})等。  
		
		
		
		java是一种强类型语言，不支持变量类型间的自动任意转换，有时必须显式地进行变量类型的(转换)。每个数据都与特定的类型相关，允许整型、浮点型、字符型数据进行混合运算。
		运算时，不同类型的数据先转换为同一种类型，然后再进行运算。转换的一般原则是位数少的类型转换为位数多的类型，这称作(自动类型转换)。这样做的目的是保证转换时不丢失有用
		信息。
		
		
		
		
		
		
		
		
		
		
		
		
		 一个源文件中如果有多个类，则最多只能有(一个)是public类型的类，且该源文件的名字即为这个公有类的名字，且大小写也要一致。其他非public的类的个数不限。
		 
		 
		 一个java程序的结构包含以下内容：
			1、 package 语句，包语句，每个文件最多只有一个，且必须放在文件开始的地方。 
			2、 import 语句，引入语句，可以没有，也可以有多个，如果有import语句的话，必须放在所有类定义的前面 。
			3、 具有public权限的类定义，每个文件中最多有一个。
			4、 类定义，每个文件中包含的非public权限的类定义的个数没有限制。
			5、 接口定义，每个文件中包含的非public权限的类定义的个数没有限制。 
			
			
			
			(包)是类的容器，包的设计人员利用包来划分名字空间，以避免类名冲突。
			
			包语句的格式为：
			package pkg1[.pkg2[.pkg3...]];
			
			
			
			程序中如果有package语句，该语句一定是源文件中的第一条非注释语句，它的前面只能有注释或空行。另外，一个文件中最多只能有一条package语句。
			
			
			
			
			
			
			
			引入语句的格式如下：
			import pkg1[.pkg2[.pkg3...]].(类名|*);
			
			
			其中，格式语句中如果指明具体的类名，则表示引入的是这个具体的类；要引入包中的所有类时，可以使用通配符"*"。
			
			
			
			
			
			
			
			
			
			
			
			
			在java程序中，表达式可以当作一个值赋给某个变量，这样的语句称为(赋值语句)。有的表达式也可单独当作语句，这样的语句称为表达式语句。 
			
			语句与表达式的相同点和不同点：
			1、 有的表达式可以当作语句，但并不是所有的语句都是表达式。
			2、 每个表达式都会得到一个值，即表达式的计算结果。 
			
			
			虽然语句也会有一个值，但这个值并不是语句的计算结果，而是执行结果。
			
			
			
			
			
			
			
			分支语句根据一定的条件，动态决定程序的流程方向，从程序的多个分支中选择一个或几个来执行。分支语句有(if语句)和(switch语句)两种。
			
			
			
			if语句是(单重选择),最多只有两个分支。
			
			
			
			
			
			if语句的基本格式是： 
			
			 if(条件表达式)
				语句1： 
				[else
					语句2；
				]
			 if关键字之后的条件表达式必须得到一个逻辑值，不能像其他语言那样以数值来代替。语句1和语句2还可以是if语句，这样的if语句称为嵌套的if语句。使用
			 嵌套 的if语句可以实现多重选择，也就是可以有多个分支。
			 
			 
			 
			 
			 switch语句的语法格式如下：
			 switch(表达式){
				case c1:
					语句组1;
					break;
				case c2:
					语句组2;
					break;
				......
				case ck:
					语句组k；
					break;
				[default:
					语句组；
					break;
				]
			 
			 }
			 
			 
			 
			 (循环语句)控制程序流多次执行一段代码。java语言提供3种循环语句，分别是for语句、while语句和do语句。
			 
			 
			 
			 
			 
			 for语句：
			 for语句的语法格式是：
			 for(初始语句;条件表达式;迭代语句)
				循环体语句;
				
				
				
				初始语句和迭代语句中可以含有多个语句，各语句间以逗号分隔。for语句括号内的3个部分都是可选的，条件表达式为空时，默认规定为恒真。
				
				
				
				
				
				
				
				while循环的语法格式是：
				while(条件表达式)
					循环体语句;
					
					
					和if语句一样，while语句中的条件表达式亦不能用数值来代替。
					
					
					
					
					do语句：
					
					do语句与while语句很相似。它把while语句中的条件表达式移到循环体之后。do 语句的语法格式是：
					   do  
						 语句;
						 while(条件表达式);
						 
						 
						 
						 
				(标号)可以放在任意语句之前，通常与for、while或do 语句配合使用。



				(break语句)可用于3类语句中，第一类是在switch语句中,第二类是在for、while及do等循环语句中，第三类是在语句块中。在switch语句
				及循环语句中,break的语义是跳过本块中余下的所有语句，转到块尾，执行其后的语句。
				
				
				
				在循环语句中，(continue语句)可以立即结束当次循环，开始执行下一次循环，当然执行前要先判断循环条件是否满足.
				
				
				
				
				
				
				
				
				
				
				
				
				scanner 类的构造方法接收一个参数，这个参数代表了(输入源)。System.in对象代表标准输入流，默认是指键盘。Scanner对象用空白(空格、
				水平制表符及回车换行符)作为输入的分割元素。这些空白称为分隔符。也可以指定用其他的符号作为分隔符。 
				
				
				
				Scanner类的next()方法读入下一个输入对象，将它作为(字符串)返回。如果输入的是一串用空白分开的多个字，则每次调用next()时都会得到下一个字。
				nextLine()方法读入当前行的所有输入，直到行尾，然后作为字符串返回。 
				
				
				(NumberFormat类)提供对数值进行格式化操作的一般功能。不能使用new运算符实例化一个 NumberFormat对象，只能直接使用类名调用一个特殊的静态方法来得到一个对象。 
				
				
				和NumberFormat类不一样，(DecimalFormat类)按惯例使用new运算符来实例化对象。它的构造方法要带一个String类型的参数，这个参数表示格式化处理模式。
				然后可以使用format()对一个具体的值进行格式化。之后，还可以调用applyPattern()方法来改变对象要使用的模式。 
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				java语言把程序运行中可能遇到的错误分为两类:一类是(非致命的)，通过某种修正后程序还能继续执行。这类错误称作(异常) Exception . 
				如打开一个文件时，发现文件不存在。又比如除零溢出、数组越界等。这一类的错误可以借助于程序员的处理来恢复。另一类是(致命的)，即程序
				遇到了非常严重的不正常状态，不能简单地恢复执行，这就是错误。比如程序运行过程中内存耗尽。 
				
				
				
				
				  异常分为以下3种：
				  1、 受检异常，必须被处理。
				  2、 运行时异常，不需要处理。
				  3、 错误，不需要处理。 
				  
				  
				  
				  (受检异常)是程序执行期间发生的严重事件的后果。
				  (运行时异常)通常是程序中逻辑错误的结果。
				  运行时异常和错误称为(不检异常)。
				  
				  
				  当发生异常时，程序通常会中断执行，并输出一条信息。对所发生的异常进行的处理就是(异常处理)。
				  
				  
				  
				  
				  
				  
				      几个常用到的公共异常：
					  1、 ArithmeticException。整数除法中，如果除数为0，则发生该类异常。
					  
					  
					  
					  to 8 middle 
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				









				
					
					
					
				
				
				
				
				
				
			 
			 
			 
			 
			 
			 
			 
			 
			 
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		 
		 
		 
		 
		 
		 
		 
		 
		
		
		
		
		
		
		
		
		
		
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	
	
	
	
	
	
	
	
	
	
	
	
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   