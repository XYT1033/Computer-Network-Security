




冯 诺依曼结构计算机的基本思想：
1、 采用"存储程序"工作方式
2、 计算机由运算器、控制器、存储器、输入设备和输出设备五个基本部件组成。
3、 存储器不仅能存放数据，而且也能存放指令，形式上数据和指令没有区别，但计算机应能区分它们；控制器应能自动执行指令；
运算器应能进行加、减、乘、除4种基本算术运算，并且也能进行逻辑运算；操作人员可以通过输入/输出设备使用计算机。
4、 计算机内部以二进制形式表示指令和数据；每条指令由操作码和地址码两部分组成，操作码指出操作类型，地址码指出操作数的地址；
由一串指令组成程序。 


现代计算机硬件主要包括(中央处理器、存储器、外部设备和各类总线)等。

(中央处理器cpu) 是整个计算机的核心部件，主要用于指令的执行。



CPU 主要包含两个基本部分：(数据通路) 和(控制器) 




数据通路： 是指指令执行过程中数据所流经的部件，其中包括各类运算部件。

 控制器： 用来对指令进行译码，生成相应的控制信号，以控制数据通路进行特定的操作。
 
 
 
  存储器分为(内存)和(外存) 
  
  
  
    内存包括(主存储器(主存) 和 高速缓冲器 cache)
	
	
	外存包括(辅助存储器)  和 (海量后备存储器)  
	
	
	
	 总线： 是传输信息的通路，用于在部件之间传输信息，CPU、主存和I/O模块通过总线互连。
	 
	 
	 从外部来看，普通台式(个人计算机PC)是用各种电缆将显示器、键盘、鼠标和机箱等连接而成的一个装置。
	 
	 
	 
	 
	 
	 
	 
	 
	 
	   (计算机的工作由存储在其内部的程序控制)，这是冯 诺依曼结构计算机的"存储程序"工作方式的重要特征。
	   
	   
	   
	    软件的发展阶段：
		1、 从第一台计算机上的第一个机器代码程序出现到实用的高级语言出现为第一阶段(1946~1956年) 
		
		2、 从实用的高级程序设计语言出现到软件工程概念出现以前这段时间为第二阶段(1956~1968年)
		
		
		
		3、 软件工程出现以后至今一直处于第三阶段。
		
		
		
		
		根据软件的用途，一般将软件分为(系统软件)和(应用软件)两大类
		
		
		
		
		
		
		  系统软件包括(操作系统， 如windows、UNIX、Linux)、(语言处理系统 如 Visual Studio、GCC)、(数据库管理系统 如 Oracle) 和
		  (各类实用程序 如磁盘碎片整理程序、备份程序)。
		  
		  
		  
		  
		  
		  操作系统(OS):主要用来管理整个计算机系统的资源，包括对它们进行调度、管理、监视和服务等，除此之外，
		  还提供计算机用户和硬件之间的人机交互界面，并提供对应用软件的支持。
		  
		  
		  
		  语言处理系统：主要用于提供一个用高级语言编程的环境，包括源程序编辑、翻译、调试、链接、装入运行等功能。
		  
		  
		  
		  
		  应用软件：指专门为数据处理、科学计算、事务管理、多媒体处理、工程设计以及过程控制等应用所编写的各类程序。 
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  计算机系统是一个(层次结构)系统，通过向上层用户提供一个抽象的简洁接口而将较低层次的实现细节隐藏起来。 
		  
		  
		  计算机解决应用问题的过程就是(不同抽象层进行转换)的过程。
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		   机器语言： 是用二进制进行编码的机器指令。
		   
		   汇编语言： 是一种机器语言的符号表示语言，通过用简短的英文符号和二进制代码建立对应关系，以方便程序员编写和阅读机器语言程序。
		   
		   
		   
		   
		   
		   
		   
		   
		   汇编程序： 也称汇编器，用来将汇编语言程序翻译成机器语言目标程序。
		   
		   
		   
		   
		   
		   
		   
		   
		     解释程序： 也称解释器，用来将源程序汇总的语句按其执行顺序逐条用子程序进行解释，并最终转换成机器语言目标程序。
			 
			 
			 机器语言程序所运行的计算机硬件和软件之间需要有一个"桥梁"，这个再软件和硬件之间的界面就是(指令集体系结构ISA)，简称(体系结构)或(系统结构)，
			 它是软件和硬件之间接口的一个完整定义。
			 
			 
			 
			  按照在计算机上完成任务的不同，可以把使用计算机的用户分成以下4类：(最终用户、系统管理员、应用程序员、系统程序员)
			  
			  
			  
			  最终用户：是指使用应用程序完成特定任务的计算机用户。
			  
			  系统管理员： 是指利用操作系统等软件提供的功能对系统进行配置、管理和维护，以建立高效合理的系统环境供计算机用户使用的操作人员。
			  
			  
			  
			  
			  
			  
			   应用程序员：是指使用高级编程语言编制应用软件的程序员。
			   
			   
			   系统程序员： 是指设计和开发系统软件的程序员。
			   
			   
			   
			   
			   
			   
			   因为编写程序并让其在计算机上执行，是为了解决最终用户的应用问题，因而，程序有时被称为(用户程序)或(应用程序)
			   
			   
			   (通用寄存器组GPRs) 由若干个通用寄存器组成，每个通用寄存器有一个编号，用于存放操作数或操作数的地址，通过指令可以指定哪个编号的寄存器中的
			   数据作为ALU运算的操作数。 
			   
			   
			   
			   
			   
			   
			    (标志寄存器)用来存放ALU运算得到的一些标志信息，如结果是否为0、有没有产生进位或错位、结果是否为负数等。
				
				
				
				
				
				
				
				
				
				
				
				(程序计数器PC) 用来存放将要执行的下一条指令的地址。 
				
				(指令寄存器IR) 用于存放从主存储器读出的指令，指令中的操作码被送到控制器进行译码，以生成控制信号。
				
				
				
				 (存储器地址寄存器MAR) 用于存放将要送到主存储器的主存地址，MAR 中的地址信息被直接送到地址线上；控制线中有读/写信号线，
				 指出数据是从CPU写入主存储器还是从主存储器读出到CPU。 
				 
				 
				 
				 
				 
				 (存储器数据寄存器MDR) 用来存放CPU 与主存储器交换的数据，根据是读操作还是写操作来控制将MDR 中的数据直接送到数据线上
				 还是将数据线上的数据接收到MDR中
				 
				 
				 
				 CPU 和主存构成(主机) 
				 
				 
				 
				 
				  指令： 是用0和1表示的一串0/1序列，用来指示CPU完成一个特定的基本操作。
				  
				  
				  
				  
				  
				  
				  
				  
				  取数指令： 是指从存储单元中取出一个数据存放到CPU内的通用寄存器中。
				  
				  
				  存数指令： 是指将CPU中通用寄存器的内容写入一个存储单元。
				  
				  
				  
				  
				  
				  指令通常被划分为若干个字段，有操作码字段、地址码字段等。(操作码字段)指出指令的操作类型，
				  如加、减、传送、跳转等；(地址码字段)指出指令处理的操作数所在存储地址，如通用寄存器编号、内存单元地址等。 
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  指令的执行过程： 
				  假设程序中第一条指令的地址在PC中，一旦启动程序执行，则按以下步骤自动逐条取出程序执行。
				  第一步： 根据PC取指令到IR 
				  第二步： 指令译码并送出控制信号 
				  第三步： 取操作数 
				  第四步： 指令执行 
				  第五步： 回写结果 
				  
				  
				  
				  
				  
				  
				  
				  (吞吐率)和(响应时间)是考量一个计算机系统性能的两个基本指标。
				  
				  
				  
				  
				  用户感觉到的执行时间： 
				  1、 CPU时间。 CPU时间指CPU用于程序执行的时间，它包括以下两部分：
				     一、用户CPU时间，指真正用于运行用户程序代码的时间； 二、系统CPU时间，指为了执行用户程序而需要CPU运行操作系统程序的时间。 
				  2、 其他时间。其他时间指等待I/O 操作完成的时间或CPU用于执行其他用户程序的时间。


					   用于对控制信号进行定时的同步信号就是CPU的时钟信号，其宽度为一个(时钟周期)
					   
					   
					 CPU的主频就是CPU时钟信号的时钟频率，是(CPU时钟周期的倒数)





				时钟频率的单位通常为(MHz)或(GHz)  
				
				
				
				(CPI)表示执行一条指令所需的时钟周期数。 
				
				
				
				CPU  执行时间： 
				 CPU执行时间= CPI * 程序总指令条数 * 时钟周期 
				 
				 指令速度所用的计量单位为(MIPS)  Million Instructions Per Second， 其含义是平均每秒种执行多少百万10^6 条指令。
				 
				 
				 
				 
				 
				 
			  (相对MIPS) 是根据某个共认的参考机型来定义的相应MIPS 值，其值的含义是被测机型相对于参考机型MIPS的多少倍。 



				基准程序： 是专门用来进行性能评价的一组程序，能够很好地反映机器在运行实际负载时的性能，可以通过在不同机器上运行相同的基准程序来比较在不同机器上的
				运行时间，从而评测其性能。
				
				
				 基准程序是一个(测试程序集)，由一组程序组成。 
				 
				  计算机系统的性能通过(执行速度)或(执行时间)两种方式来进行评测。
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  to 7 upper 
				  
				  
				  
				  
				  
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				








					 


					 
					 
					 
					 
					 
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				  
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				 
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			   
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
			  
		   
		   
		   
		   
		   
		   
		   
		   
		   
		   
		   
		   
		   
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	 
	 
	 
	 
	 
	 
	 