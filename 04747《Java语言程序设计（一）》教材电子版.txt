



 1.1 1.1 Java 语言特点  Java 语言特点
Java 语言最初的应用对象是消费性电子产品(即PDA 、电子游戏机、电视机顶盒之类的产品)。为了进入消费性电子
产品市场，SUN 公司专门成立了一个项目开发小组，目标是设计嵌在消费性电子产品的小型分布式系统软件，能够适用
于异构网络、多主机体系结构，能实现信息安全传递。项目小组的最初设想是用C++语言完成这个目标。由于 C++语言的
复杂性和不安全性，不能胜任这项工作。为此，项目小组开发一个取名为Oak 的语言。
Oak 语言在消费性电子产品市场上没有获得青睐。但在当时，Internet 开始流行，人们发明了一种网络传输协议，
这种协议可以在文本中插入图片和声音，能使单调的 Internet 世界变得图文并茂。虽然 Web 页面拥用图文和声音，但仍
然是静态的，不具备交互性。要让页面拥有动态画面，并能交互，需要在Web 页面中嵌入一会段程序。由于在 Internet
上运行的数以千计不同类的计算机，这就要求编写这种程序的语言必须具有平台无关性，并要求语言必须简练，支撑环
境要小，而安全性却很高。Oak 语言恰好能够满足这些要求。
将 Oak 语言正式应用于Internet 还需要进一步完善，还要求有一个支持它的 Web 浏览器。能用于编写浏览器，并
获得浏览器扶持的新版本Oak 语言取名Java。Internet 得到 Java 语言的支持，可以实现真正的交互，人们使用浏览器
能“漫游”丰富多彩的 Internet 世界。
Java 语言是适用于分布式计算环境的面向对象编程语言，它虽类似 C 和C++，但比C++简单，忽略了许多为提高计
算效率，初学者较难掌握的程序语言特性。
Java 语言主要有以下 特点：
1． 1． 强类型  强类型
Java 语言是一种强类型语言，强类型能约束程序员必须遵守更多的编程规定，也能让编译器检测出程序中尽可
能多的错误。
2． 2． 编译和解释  编译和解释
Java 语言是一种高级编程语言，用 Java 语言编写的源程序在计算机上运行需经过编译和解释执行两个严格区分
的阶段。Java 语言的编译程序先将 Java 源程序翻译成机器无关的字节码(bytecode)，不是通常的编译程序将源程
序翻译成计算机的机器代码。运行时，Java 的运行系统和链接需要执行的类，并作必要的优化后，解释执行字节码
程序。
3． 3． 自动无用内存回收功能  自动无用内存回收功能
Java 语言具有自动无用内存回收功能，程序可以按需使用内存，但不需要对无用内存显式地撤销分配。系统有
一个垃圾收集器(garbage collector)，自动收集程序不再使用的内存。这样，能避免显式的撤销分配所引起的安全
问题。Java 语言不再含有任何不安全的语言成分。例如，没有指针，数组元素都要检查下标是否越界。
4． 4． 面向对象  面向对象
面向对象是程序员编写大型程序、有效控制程序复杂性的重要手段。Java 语言在面向对象方面，比 C++更“纯”，
它的所有数据类型，包括布尔类型、整形、字符型等，都有相应的类，程序可完全基于对象编写。
面向对象语言主要有 封装性、继承性和多态性三个特点。封装就是将实现细节隐藏起来，只给出如何使用的信
息。数据及数据上的操作用类封装，对象是类的实例，外界使用对象中的数据及可用的操作受到一定的限制。继承
体现众多的一种层次对象的特性，下一层的类可从上一层的类继承定义，从上一层类派生的类的对象能继承上一层
对象的特性，同时可以改变和扩充一些特性，以适应其自身的特点。多态性的意义主要体现在逻辑上相同的不同层
次上的操作，使用相同的操作名，根据具体对象，能自动选择对应的操作。Java 语言很实用地实现了这三种特性。
5． 5． 与平台无关  与平台无关
与平台无关是对程序 可移植性最直接最有效的支持。Java 语言的设计者在设计时重点考虑了 Java 程序的可移植
性，采用多种机制来保证可移植性，其中最主要的是定义了一种虚拟机(virtual machine),以及虚拟机使用的 java
字节码。在任何平台上,Java 源程序被Java 编译器编译成虚拟机能够识别的字节码。这样，只要有 Java 虚拟机的
平台，就能解释执行 java 字节码程序，从而实现 Java 与平台无关。另外，Java 语言还采用基于国际标准的数据类

型，在任何平台上，同上种数据类型是一致的。例如，用 int 标识32 位二进制位(bit)整型数据，那么无论在哪一
台计算机上，Java 的 int 数据都是 32 位整数。相反，C 语言会随着硬软件平台的改变，用int 标识的整数位数也可
能不全相同。
Java 语言提高可移植性的代价是降低程序的执行效率。出于 java 语言也是一种解释执行的语言，Java 程序的
执行速度与C 程序的执行速度有较大的差别。不过，为了尽量弥补执行效率低的缺陷，java 的字节码在设计上非常
接近现代计算机的机器码，这有助于提高解释执行的速度。
6． 6． 安全性  安全性
Java 是在网络环境中使用的编程语言，必须考虑安全性问题，主要有以下两个方面：
设计的安全防范：Java 语言没有指针，避免程序因为指针使用不当，访问不应该访问的内存空间；提供数组元
素上标检测机制，禁止程序越界访问内存；提供内存自动回收机制，避免程序遗漏或重复释放内存。
运行安全检查：为了防止字节码程序可能被非法改动，解释执行前，先对字节码程序作检查，防止网络“黑客”
对字节码程序已作了恶意改动，达到破坏系统的目的。最后，浏览器限制下载的小应用程序不允许访问本地文件，
避免小应用程序破坏本地文件。
7． 7． 分布式计算  分布式计算
Java 语言支持客户机/服务器计算模式。Java 程序能利用URL 对象，能访问网络上的对象，如同访问本地的文
件一样，实现数据分布。另外，Java 的客户机/服务器模式也可以把计算从服务器分散到客户机端，实现操作分布。
8． 8． 多线程  多线程
线程是比进程更小的一种可并发执行的单位，每个进程都有自己独立的内存空间和其他资源，当进程切换时需
要进行数据和资源的保护与恢复。若干协同工作的线程可以共享内存空间和资源，线程切换不需要数据的保护与恢
复。
Java 的运行环境采用多线程实现，可以利用系统的空闲时间执行诸如内存回收等操作；Java 语言提供语言级多
线程支持，用 Java 语言能直接编写多线程程序。




1.2 Java 应用程序和小应用程序
Java 程序可以是独立的应用程序和能在浏览器上执行的小应用程序(Applet)。两种 Java 程序都由一个或多个扩展
名为“.class”的文件组成。都需要java 虚拟机(JVM)载入并翻译。这两种程序的主要区别是：小应用程序只能在与 Java
兼容的容器中运行，可以嵌入在HTML 网页内，在网络上发布，当网页被浏览时，在浏览器中运行。小应程序的运行还要
受到严格的安全限制，例如，它不能访问用计算机上的文件。Java 应用程序没有这些限制，也不支持网页嵌入和下载运
行。
小应用程序和应用程序在代码编写上也有很大差异。一个小应用程序必须定义成一个 Applet 类的子类，应用程序可
以是 Applet 类的子类，也可以不是。应用程序必须在一个类中定义一个 main()方法，该方法代表应用程序的入口。而
小应用程序不必定义main()方法，它的执行由Applet 类中定义的多个方法控制。
[例 1.1] 一个非常简单的应用程序。
public class Example1_1{//这是我的第一个应用程序
public static void main(String []args){
System.Out.println(“你好!欢迎你学习 Java 语言。”);
}
}
上述 java 程序的执行将输出以下字样：
你好!欢迎你学习Java 语言。
一个应用程序由若干个类组成，上面这个应用程序只有一个类，类的名字是 Example1_1。public 是 java 语言的关
键字，表示声明的类Example1_1 是公用的。class 也是关键字，用来声明类。最外层的一对花括号以及括号内的内容叫
做类体。public static void main(String []args)是类 Example1_1 的一个方法。一个应用程序必须只有一个类含有
main()方法，这个类是应用程序的主类。public static void 是对 main()方法的说明。应用程序的 main()方法必须被
说明成public static void。表示main()方法的访问权限是公有的，它是一个类方法，没有结果返回，参见第3 章。String
[]args 或 String args[]，声明main()方法的参数是一个字符串数组，参见第 4 章。
Java 源程序命名受 严格的限制。 Java 源文件的 扩展名必须是“.java”如果源文件中有多个类， 那么 只能有一个
public 类；如果源文件中有 public 类，那么源文件的 名字 必须 与 这个 类 的 名字完全相同。例如，例1.1 应用程序的源
文件名必须是 Example1_1.java。如果源文件没有public 类，那么源文件的名字只要和某个类的名字相同即可。




TO PAGE 2 














