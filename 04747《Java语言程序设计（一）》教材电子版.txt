



 1.1 1.1 Java 语言特点  Java 语言特点
Java 语言最初的应用对象是消费性电子产品(即PDA 、电子游戏机、电视机顶盒之类的产品)。为了进入消费性电子
产品市场，SUN 公司专门成立了一个项目开发小组，目标是设计嵌在消费性电子产品的小型分布式系统软件，能够适用
于异构网络、多主机体系结构，能实现信息安全传递。项目小组的最初设想是用C++语言完成这个目标。由于 C++语言的
复杂性和不安全性，不能胜任这项工作。为此，项目小组开发一个取名为Oak 的语言。
Oak 语言在消费性电子产品市场上没有获得青睐。但在当时，Internet 开始流行，人们发明了一种网络传输协议，
这种协议可以在文本中插入图片和声音，能使单调的 Internet 世界变得图文并茂。虽然 Web 页面拥用图文和声音，但仍
然是静态的，不具备交互性。要让页面拥有动态画面，并能交互，需要在Web 页面中嵌入一会段程序。由于在 Internet
上运行的数以千计不同类的计算机，这就要求编写这种程序的语言必须具有平台无关性，并要求语言必须简练，支撑环
境要小，而安全性却很高。Oak 语言恰好能够满足这些要求。
将 Oak 语言正式应用于Internet 还需要进一步完善，还要求有一个支持它的 Web 浏览器。能用于编写浏览器，并
获得浏览器扶持的新版本Oak 语言取名Java。Internet 得到 Java 语言的支持，可以实现真正的交互，人们使用浏览器
能“漫游”丰富多彩的 Internet 世界。
Java 语言是适用于分布式计算环境的面向对象编程语言，它虽类似 C 和C++，但比C++简单，忽略了许多为提高计
算效率，初学者较难掌握的程序语言特性。
Java 语言主要有以下 特点：
1． 1． 强类型  强类型
Java 语言是一种强类型语言，强类型能约束程序员必须遵守更多的编程规定，也能让编译器检测出程序中尽可
能多的错误。
2． 2． 编译和解释  编译和解释
Java 语言是一种高级编程语言，用 Java 语言编写的源程序在计算机上运行需经过编译和解释执行两个严格区分
的阶段。Java 语言的编译程序先将 Java 源程序翻译成机器无关的字节码(bytecode)，不是通常的编译程序将源程
序翻译成计算机的机器代码。运行时，Java 的运行系统和链接需要执行的类，并作必要的优化后，解释执行字节码
程序。
3． 3． 自动无用内存回收功能  自动无用内存回收功能
Java 语言具有自动无用内存回收功能，程序可以按需使用内存，但不需要对无用内存显式地撤销分配。系统有
一个垃圾收集器(garbage collector)，自动收集程序不再使用的内存。这样，能避免显式的撤销分配所引起的安全
问题。Java 语言不再含有任何不安全的语言成分。例如，没有指针，数组元素都要检查下标是否越界。
4． 4． 面向对象  面向对象
面向对象是程序员编写大型程序、有效控制程序复杂性的重要手段。Java 语言在面向对象方面，比 C++更“纯”，
它的所有数据类型，包括布尔类型、整形、字符型等，都有相应的类，程序可完全基于对象编写。
面向对象语言主要有 封装性、继承性和多态性三个特点。封装就是将实现细节隐藏起来，只给出如何使用的信
息。数据及数据上的操作用类封装，对象是类的实例，外界使用对象中的数据及可用的操作受到一定的限制。继承
体现众多的一种层次对象的特性，下一层的类可从上一层的类继承定义，从上一层类派生的类的对象能继承上一层
对象的特性，同时可以改变和扩充一些特性，以适应其自身的特点。多态性的意义主要体现在逻辑上相同的不同层
次上的操作，使用相同的操作名，根据具体对象，能自动选择对应的操作。Java 语言很实用地实现了这三种特性。
5． 5． 与平台无关  与平台无关
与平台无关是对程序 可移植性最直接最有效的支持。Java 语言的设计者在设计时重点考虑了 Java 程序的可移植
性，采用多种机制来保证可移植性，其中最主要的是定义了一种虚拟机(virtual machine),以及虚拟机使用的 java
字节码。在任何平台上,Java 源程序被Java 编译器编译成虚拟机能够识别的字节码。这样，只要有 Java 虚拟机的
平台，就能解释执行 java 字节码程序，从而实现 Java 与平台无关。另外，Java 语言还采用基于国际标准的数据类

型，在任何平台上，同上种数据类型是一致的。例如，用 int 标识32 位二进制位(bit)整型数据，那么无论在哪一
台计算机上，Java 的 int 数据都是 32 位整数。相反，C 语言会随着硬软件平台的改变，用int 标识的整数位数也可
能不全相同。
Java 语言提高可移植性的代价是降低程序的执行效率。出于 java 语言也是一种解释执行的语言，Java 程序的
执行速度与C 程序的执行速度有较大的差别。不过，为了尽量弥补执行效率低的缺陷，java 的字节码在设计上非常
接近现代计算机的机器码，这有助于提高解释执行的速度。
6． 6． 安全性  安全性
Java 是在网络环境中使用的编程语言，必须考虑安全性问题，主要有以下两个方面：
设计的安全防范：Java 语言没有指针，避免程序因为指针使用不当，访问不应该访问的内存空间；提供数组元
素上标检测机制，禁止程序越界访问内存；提供内存自动回收机制，避免程序遗漏或重复释放内存。
运行安全检查：为了防止字节码程序可能被非法改动，解释执行前，先对字节码程序作检查，防止网络“黑客”
对字节码程序已作了恶意改动，达到破坏系统的目的。最后，浏览器限制下载的小应用程序不允许访问本地文件，
避免小应用程序破坏本地文件。
7． 7． 分布式计算  分布式计算
Java 语言支持客户机/服务器计算模式。Java 程序能利用URL 对象，能访问网络上的对象，如同访问本地的文
件一样，实现数据分布。另外，Java 的客户机/服务器模式也可以把计算从服务器分散到客户机端，实现操作分布。
8． 8． 多线程  多线程
线程是比进程更小的一种可并发执行的单位，每个进程都有自己独立的内存空间和其他资源，当进程切换时需
要进行数据和资源的保护与恢复。若干协同工作的线程可以共享内存空间和资源，线程切换不需要数据的保护与恢
复。
Java 的运行环境采用多线程实现，可以利用系统的空闲时间执行诸如内存回收等操作；Java 语言提供语言级多
线程支持，用 Java 语言能直接编写多线程程序。




1.2 Java 应用程序和小应用程序
Java 程序可以是独立的应用程序和能在浏览器上执行的小应用程序(Applet)。两种 Java 程序都由一个或多个扩展
名为“.class”的文件组成。都需要java 虚拟机(JVM)载入并翻译。这两种程序的主要区别是：小应用程序只能在与 Java
兼容的容器中运行，可以嵌入在HTML 网页内，在网络上发布，当网页被浏览时，在浏览器中运行。小应程序的运行还要
受到严格的安全限制，例如，它不能访问用计算机上的文件。Java 应用程序没有这些限制，也不支持网页嵌入和下载运
行。
小应用程序和应用程序在代码编写上也有很大差异。一个小应用程序必须定义成一个 Applet 类的子类，应用程序可
以是 Applet 类的子类，也可以不是。应用程序必须在一个类中定义一个 main()方法，该方法代表应用程序的入口。而
小应用程序不必定义main()方法，它的执行由Applet 类中定义的多个方法控制。
[例 1.1] 一个非常简单的应用程序。
public class Example1_1{//这是我的第一个应用程序
public static void main(String []args){
System.Out.println(“你好!欢迎你学习 Java 语言。”);
}
}
上述 java 程序的执行将输出以下字样：
你好!欢迎你学习Java 语言。
一个应用程序由若干个类组成，上面这个应用程序只有一个类，类的名字是 Example1_1。public 是 java 语言的关
键字，表示声明的类Example1_1 是公用的。class 也是关键字，用来声明类。最外层的一对花括号以及括号内的内容叫
做类体。public static void main(String []args)是类 Example1_1 的一个方法。一个应用程序必须只有一个类含有
main()方法，这个类是应用程序的主类。public static void 是对 main()方法的说明。应用程序的 main()方法必须被
说明成public static void。表示main()方法的访问权限是公有的，它是一个类方法，没有结果返回，参见第3 章。String
[]args 或 String args[]，声明main()方法的参数是一个字符串数组，参见第 4 章。
Java 源程序命名受 严格的限制。 Java 源文件的 扩展名必须是“.java”如果源文件中有多个类， 那么 只能有一个
public 类；如果源文件中有 public 类，那么源文件的 名字 必须 与 这个 类 的 名字完全相同。例如，例1.1 应用程序的源
文件名必须是 Example1_1.java。如果源文件没有public 类，那么源文件的名字只要和某个类的名字相同即可。




一个小应用程序也出若干个类组成，其中必须有一个类，它继承系统提供的 Applet 类，这个类是小应用程序的主类。
主类必须是public 的，源文件名必须与小应用程序的主类名相同。上述程序的源文件名必须是 Example1_2.java。小应
用程序的结构参见3.5 节。
在结束这一节之前，先讨论一下程序中经常出现的注释。注释是程序中的说明文字，用于帮助阅读程序，它不是语
句，不会影响程序的执行效率。Java 语言的注释有三种形式：
行注释 // 变量 r 是贺的半径
块注释 /* 以下程序段是采用冒泡排序对数组元素实现从小到大排序 */
文档注释 /* *类 Student 是学生类*/
行注释用于简短地说明前面代码的意义或功能。注释内容至行末结束，不能跨行。
例如：
int fontsize =30 ;//标题字体大小
块注释是多行注释，用于说明下面程序段的算法、功能等，块注释不可嵌套使用。
文档注释能被实用程序 javadoc 接受，它能自动生成程序的 HTML 文档。






对于Java 应用程序， 先编写 Java 源程序，源程序经 Java 编译器编译后产生
码文件
经 Java 编译器编译后产生
码文件，最后由 Java 解释器 解释执行字节码文件。对于小应用程序， 先编写源程序，然后经 Java 编译器编译后，产生
字节码文件
编译后，产生
字节码文件，最后由 Web 浏览器解释执行字节码文件。
以下以使用SUN 公司提供的 Java JDK(java Developer’s Kit)为例，并假设 Java JDK 安装在 d:\java 目录下，则
在该目录下还应包含以下几个文件和子目录：
(1) 子目录 d:\java\bin,这个子目录是 Java JDK 的核心，其中最主要的可执行文件有：
1) javac---编译器
2) java---解释器
3) jdb---调试器
4) appletviewer---java Applet 解释器
(2) 子目录d:\java\lib，这个子目录存储的是函数库。
编写源程序时，使用一个文字编辑器，输入源程序文件，并保存。键入编译命令，使用 Java 编译器编译 Java
源程序。键入解释命令，通过解释器解释执行 Java 应用程序的字节码文件。对于小应用程序需通过支持 Java
的浏览器解释执行字节码文件。
设输入前面所述 Java 程序，源文件名为 Example1_1.java，保存在 D：\java 目录下。
Java 编译器的使用格式是：
javac [选项] 源文件
例如，可用以下命令编译以上输入的 Java 应用程序： 
javac d:\java\Example1_1.java






Java 解释器java.exe 用来解释执行 Java 类文件，解释器的使用格式为：
java [选项]类名[参数]
其中，类名指定的类必须是 main()方法的，即是一个 Java 应用程序。
对于使用开发环境情况来说，编辑源程序、编译、执行和调试直接使用环境提供的工具，使开发程序变得非常
简单。



1．4 标识符和关键字
如同别的程序语言一样，Java 语言也有基本符号，由基本符号按一定的构词规则构成标识符等基本词汇，再由基本
词汇和关键字按语言的句法构成Java 程序。
1． 1． 字符集  字符集
Java 语言使用 Unicode 字符集，共有 65535 个字符，包括：
(1) 数字符 10 个(0~9)。
(2) 英文字母大、小写字符各26 个(A~Z 和 a~z)。
(3) 下划线字符，美元符号。
(4) 文字字符，(汉字，日文片假名、平假名和朝鲜文字等)。
(5) 其他用于构成特殊符号的字符集。
2． 2． 标识符  标识符
标识符用于命名程序对象。例如，类名、变量名、方法名等。Java 语言的标识符可以按以下规则任意命名：
(1) 由字母(包括英文字母、下划线字符、美元字符、文字字符)和数字字符组成。
(2) 限定标识符的第一个字符不能是数字符。
例如，下列 4 个字符串都可以个为标识符：
Boy_$、$63Girl、颜色、小伙子
而以下 4 个字符不能作为标识符：
46A、%Val、c+2、Hello!
前两是因为首字符不合理，后两个含有不允许在标识符中出现的字符。
除了按上述规则命名的习惯约定：
一般变量名、方法名用小写英文字母开头；文字和常数用大写字母命名；类名首字母用大写字母；包名
全部用小写字母。命名习惯是一种公共约定，Java 语言的语法并没有这种限制，但是培养良好的编程习
惯有利于程序维护和协作开发。
3． 3． 关键字  关键字
为了表示程序结构、定义和修饰等，Java 语言引入一组关键字，参见附录 A。关键字是上些英文单词，在语言中，
关键字已经被赋予特定的意义，不能用这些关键字作为标识符命名程序对象。在Java 语言中，关键字的作用有以下多个
方面：
描述程序结构、声明类、定义类的成员、简单数据类型、值和变量、异常情况处理、实例(对象)的创建和检验、流
程控制等。
Java 语言中所有关键字均由小写字母组成。每个关键字在程序中出现有特定位置和使用方法的要求。关键字不可以
用做变量、方法、类或标号的标识符(名字)。



1.5 基本数据类型
Java 语言是强类型语言，每个变量和表达式都有确定的类型，在变量赋值时要进行 类型兼容性检验。数据类型可分


为 基本数据类型和 非基本数据类型两大类。
基本数据类型也称为 原始数据类型，是系统预先规定的一些常用类型。它们是：整数类型、浮点数(实数)类型、字
符(文字)类型、逻辑类型(布尔型)
整数类型、浮点数(实数)类型、字
符(文字)类型、逻辑类型(布尔型)。
非基本数据类型也称为 复合数据类型，是由基本类型组合的新类型。 非基本数据类型分为： 数组、字符串、类、接
口。
本小节只介绍基本数据类型，非基本数据类型将在以后章节中分别介绍。
1.5.1 逻辑类型
逻辑类型用关键字boolean 标识，所以也称布尔型。逻辑类型只有真和假两个值，true 表示真,false 表示假。
以下是逻辑变量定义的例子：
boolean b; boolean bool;
boolean flg1,flg2, 美丽；//一次定义多个变量
boolean b1 = true,b2= false,丑=false;//定义时可以赋初值
逻辑变量用于记录某种条件成立与否，也用语句中作条件判断。
1.5.2 字符类型
字符类型用关键字 char 标识。字符型数据是一个字符，内部表示是字符的 Unicode 代码，共用 65535 个不同
的字符。在Java 程序中， 字符常量有 普通字符和 转义字符常两种。
用单引号括住一个字符，表示一个普通字符常量。例如，’a’、’B’、’$’、’国’。
对于被语言用作特定意义的字符，或者不能显式显示的字符，需用转义字符标记它们。
例如，换行符用\n 标记，水平制表符用\t 标记。常用的转义字符的标记方法见表 1-2。其中，n \nnn 是用 八进制代码
表示的字符，n \unnnn 是用 十六进制代码表示的字符。例如：\141 表示字母 a，\u0061 也表示字母 a.以下是字符变量定
义的例子：
char ch; char ch1,ch2,漂亮;
char ch3 = ‘A’,ch4 = ‘家’,丑=’假’;//定义时可以赋给初值




1.5.3 整数类型
整数是不带小数点和指数的数值数据。由于计算机只能表示整数的一个子集，表达更大范围内的整数需要更多的二
进制位，Java 语言将整型数据按数值范围大水不同分成四种：
(1) 基本型：用int 标识。4 个字节，32 位，取值范围是-2
31 ~2 31  -1，即-2147483648~2147483647。
(2) 字节型：用byte 标识。1 个字节，8 位，取值范围是-2
7 7 ~2 7  -1，即-128~127。
(3) 短整型：用short 标识。2 个字节，16 位，取值范围是-2
16 ~2 16  -1，即-23768~32767
(4) 长整型：用long 标识。8 个字节，64 位，取值范围是-2
64 ~2 64  -1，即-923372036854775808L~923372036854775807L
每种 整数类型 处理不同范围的整数值，并且 都是带符号 的。
整型常量有 十进制、八进制和十六进制三种写法。如下 面的示例所示：
1234(十进制)，0777(八进制，以数字0 开头)，0x3ABC(十六进制，以 0x 开头，后随数字符和英文 A 到 F)，5333L
或 5333l(以字母L 或 l 结尾是长整数)。
以下是整型变量定义的实例：
int I；int x,积;byte 字节变量;//一个字节整型变量，该变量的名为字节变量


long z,sum;int w =12,len =-1230;long big = 9876L;//定义同时可以赋初值。
1.5.4 浮点数类型
浮点数类型也称实型，浮点数是带小数点或指数的数值数据。 Java 语言的浮点数有单精度和双精度两种。
1． 1． 单精度型  单精度型
单精度型 用 float 标识，占 4 个字节，32 位，取值-10
38 ~10 38 。float 型常是的书写的方法是在实数
之后加上字母  F 或 f.例如：23.54f,12389.987F。
2． 2． 双精度型  双精度型
双精度型 用 double 标识，占 8 个字节，64 位，取值-10
308 ~10 308 。double 型常是的 书写的方法有两种：
一种是直接写一个实数， 或在实数后面加上字母 D 或 d.例如：123.5439、123.5439D, 123.5439d。另一种
是科学计数法，用10 的方幂表示(用字符 e 或 E 表示幂底 10)。例如：123.24e40(科学计数法表示，值为
123.24 乘 10 的 40 次方)。
以下是浮点数类型变量定义的例子:
float x,y;
double v=12.86,u=2431098.987D;
float u=12.36f;
浮点数类型与整数不同，当执行运算时如果出现某种不正常的状态，浮点数类型不会抛出异常。例如，
如果用0 除浮点数类型的变量，则计算结果是一个特别的无限值。


习题
1． 指出Java 语言的主要特点和 Java 程序的执行过程。
答：主要特点：
(1)强类型，(2) 编译和解释，(3) 自动无用内存回收功能，(4) 面向对象，
(5) 与平台无关，(6)安全性，(7)分布式计算，(8)多线程。
Java 程序的执行过程：是解释执行。
1.javac [选项] 源文件==编译
2．java [选项] 类名[参数] ==执行



2．1 数据运算
在高级语言中，运算由表达式表示。 表达式由 运算符 和 运算分量 组成，运算分量可以是常量、变量和方法调用。Java
语言的基本运算可分成以下几类 ：赋值运算，算术运算，自增和自减运算，关系运算，逻辑运算，条件运算和字符串连
接运算等。
2．1．1 赋值运算
在 Java 语言中，符号“=”是赋值运算符，不是“相等”(相等运算符是“==”，见关系运算符的叙述)。赋值运算分
为两类：一是简单赋值运算；二是复合赋值运算。
1． 1． 简单赋值运算  简单赋值运算
简单赋值运算的一般形式如下：
变量 = 表达式
赋值运算的执行过程是：
(1) 计算赋值运算符的右端的表达式。
(2) 当赋值运算符两侧不一致时，将表达式值的类型自动转换成变量的类型。
(3) 将表达式的值赋值给变量，即存储到与变量对应的存储单元中。
完成一个赋值运算的表达式称为赋值表达式，赋值表达式是先计算表达式的值，然后将表达式的值赋值给变量。
例如，表达式 x=x+1，表示完成表达式 x+1 的计算，将计算结果赋值给变量 x。
这里的类型转换是指数值数据的类型自动转换，这样的 自动转换 只能由
．．．
简单类型向复杂类型转换， 不能从复杂
的转换成简单的
从复杂
的转换成简单的。即如下所示的从左到右转换：
byte->short->int->long->float->double
例如，以下代码说明int 类型能自动转换成 double 类型：
int j=3;
double y=2.0;
y=j;//j 的值为 3，y 的值为 3.0
以下则是不正确的代码，double 类型不能自动转换成 int 类型。
j=y;
Java 语言约定赋值运算也有值，它的值就是赋予变量的值，因此，赋值运算的结果可以继续赋值。例如：
int j;
double y=2.0;
y=j=3;//j 的值为3，,y 的值为3.0
赋值运算符结合性“自右至左”，当连续有多上赋值运算时，是从右至左逐个赋值。
2． 2． 复合赋值运算  复合赋值运算
在程序中，经常遇到在变量现在值的基础上作某种修正的运算。例如
x=x+5
这类运算的特点是：变量既要参与运算，又要接受赋值。为避免对同一个变量的地址重复计算，引入复合赋值
运算符。常用的复合赋值运算符有：
+=、-=、*=、/=、%=
例如：
x+=5;//等价于 x=x+5
x *=u+v;//等价于x=x*(u+v),这里括号不能省略
a+=a-=b+2;//等价于a=a+(a=a-(b+2))
记 θ 为某个双目运算符，复合赋值运算


xθ=e
的等效表达式为
x= xθ(e)
当 e 是一个复杂表达式时，等效表达式的 括号是必需的

2．1．2 算术运算
的。
2．1．2 算术运算
算术运算要求 运算分量的类型是 数值类型的(整数类型和浮点数类型)。运算时，只需一个运算分量的是单
目运算，需两个运算分量的是双目运算。算术运算的运算符是：
单目算术运算符：＋（取正）、－（取负）
双目算术运算符：＋（加）、－（减）、＊（乘）、/（除）、％（求余数）
说明：
（1） 加、减、乘、除和求余数运算都是双目运算符，结合性都是从左至右。取正和取负是单目运算符，结合性是从
右至左，其优先级高于＋、－、＊，％等双目运算符。
（2） “/”为 除法运算符，当 除数和被除数均为整数类型数据时，则 结果 也是 整数类型 数据。例如７/4 的结果为１。
（3） “％”为求余数运算符， 求余数运算所得 结果的符号与 被除的符号相同。例如：５％３的结果为２，－５％３
的结果为－２，５％－３的结果为２。
用算术运算符、运算分量和括号连接起来，符合Java 语言语法规则的计算式，称为算术表达式。例如，如果变量 x
和 y 已经被正确声明，并且已经赋予初值，则以下的式子就是一个正确的算术表达式：
X*2+y*(x-5)
2.1.3 自增和自减运算
自增运算符“++”和自减运算符“--”是单目运算符，要求运算分量是数值类型的变量。其作用是变量的值增１或
减１。这两个运算符与变量结合有以下四种可能形式：
++i 前缀形式，表示在引用变量 i 之前，先使 i 加１，以加１后的i 值为运算结果。
--i 前缀形式, 表示在引用变量 i 之前, 先使 i 减１，以减１后的 i 值为运算结果。
i++后缀形式，表示在收用变量 i 之后，才使 i 加１，即以增１前的 i 值为运算结果。
i--后缀形式，表示在引用变量 i 之后，才使 i 减１，即以减１前的 i 值为运算结果。
例如：
i=4;j=++i;//i 结果为５，j 的结果为５
i=4;j=i++;//i 结果为５，j 的结果为4
i=4;j=--i;//i 结果为3，j 的结果为3
i=4;j=i--;//i 结果为3，j 的结果为4
上述例子说明， 对变量采用自增或自减，用前缀形式或用后缀形式，对 变量 本身来说， 效果是相同的 ，但 表达式的
值
的
值 不相同 。前缀形式是变量运算之后的新值，后缀形式是变量运算之前的值。
自增自减运算能使程序更为简洁和高效，但在使用时需注意“＋＋”和“――”运算的运算 只能是变量， 不能是常
量或表达式
常
量或表达式。例如，４++或（i+j）++都不是合法的。
2.1.4 关系运算
关系运算用来表达两个表达式值的比较，运算结果是布尔型。有６上关系运算符：
＜（小于）、＜＝（小于等于）、＞（大于）、＞＝（大于等于）、＝＝（等于）、！＝（不等于）
关系运算对左右两侧的值进行比较，如果比较运算的结果成立，则值为 true；不成立为 false.
上述６个关系运算符的优先级不完全相同。＜、＜＝、＞、＞＝的优先级高于＝＝，！＝。
例如，表达式 x>y==c<d,等价于(x>y)==(c<d)。该表达式的意义是 x>y 与 c<d,或同时成立或同时不成立。
关系运算符的优先级低于算术运算符的优先级。
例如：x>u+v,等价于x>(u+v).
关系运算符的结合方向是自左至右。
2.1.5 逻辑运算
逻辑运算用于描述逻辑表达式，实现连续多个条件的 逻辑与、逻辑或、逻辑否定的判定。有３个逻辑运算符：
＆＆（逻辑与）、||（逻辑或）、！（逻辑否定）
其中：运算符＆＆和||是双目运算符、运算符！是单目运算符。逻辑运算的操作数必须是布尔型的，结果也是布尔
型的。
逻辑否定“！”的优先级 高于 算术运算符的优先级。 逻辑与“＆＆”和 逻辑或“||”的优先级 低于 关系运算符的优先
级。





例如：
a>b&&x>y 等价于(a>b)&&(x>y)
a!=b||x!=y 等价于(a!=b)||(x!=y)
x==0||x<y&&z>y 等价于(x==y)||((x<y)&&(z>Y))
!a&&b||x>y&&z<y 等价于((!a)&&b)||((x>y)&&(z<y))
逻辑运算符用来描述逻辑表达式。例如，闰年的条件是：每４年一个闰年，但每１００年少一个闰年，每４０
０年又增加一个闰年。如果年份用整数类型变量 year 表示，则 year 年是闰年的条件是：
（year 能被４整除，但不能被１００整除）或（year 能被４００整除）
用逻辑表达式可描述如下：
（year/%4==0&&year%100!=0）||year%400==0
需要 特别指出的是， 逻辑与和逻辑或的运算符有以下性质，Java 语言利用这些性质，在进行连续的逻辑运算时，
不分逻辑与和逻辑或的优先级 进行计算，而是顺序进行逻辑与和逻辑或的计算，一旦逻辑子表达式或逻辑子表
达式或逻辑表达式能确定结果，这不再继续计算
一旦逻辑子表达式或逻辑子表
达式或逻辑表达式能确定结果，这不再继续计算。
（１） 对表达式 a&&b,当a 为 false 时，结果为 false，不必再计算 b；仅当 a 为 true 时，才需计算 b。
（２） 对表达式 a||b，当a 为true 是，结果为 true，不心再计算 b;仅当 a 为 false 时，才需计算 b。
例如：设有 a=b=c=1,计算++a>=1||++b<++c。从左到右顺序逻辑或表达式，先计算子表达式++a>=1,变量 a 的值
变为２，++a>=1 为 true,整个逻辑或表达式的值已经为 true，不再计算右边的子表达式++b<++c。因而变量 b
和 c 的值不变，仍为１。
在具体编写程序时，也应利用以上性质。用逻辑与表达两个条件必须同时成立时，如果条件不成立，条件
２的值不便计算，则逻辑表达式应写成：
条件１＆＆条件２
避免在条件１不成立情况下，计算条件２。例如，要表示 y/x>2 和 x!=0 同时成立，应写成：
x!=0&&y/x>2
当 x 为０时，不会 y/x。而写成：
y/x>2&&x!=0
是不正确的，因为当x 为０时，不能计算 y/x。对于逻辑或也有类似情况。
2.1.6 条件运算
条件运算是一个三目运算，一般形式如下：
逻辑表达式？表达式１：表达式２
条件运算的执行过程是：
（1） 计算逻辑表达式
（2） 如果逻辑表达式的值为 true，则计算表达式１，并以表达式１的值为条件运算的结果（不再计算表达式２）
（3） 如果逻辑表达式的为false,则计算表达式２，并以表达式２的值为条件运算的结果（未计算表达式１）。
例如：
x>y ? x+5 : y-4
如果x>y 条件为 true，则上述表达式取 x+5 的值，否则取 y-4 的值。
条件运算符（？：）的优先级高于赋值运算符，低于逻辑运算符，也低于关系运算符和算术运算符。
例如：max = x>y ?x+5:y-4
等价于：max = ((x>y)?x+5:(y-4))
条件运算符的性为“自右至左”。例如


x>y?x:u?v?u:v
等价于：x>y?x:(u>v?u:v)
条件表达式的返回值类型由表达式１和表达式２的类型确定。如果表达式１值的字节数比表达式２的值的字节数多，
则条件表达式值的类型与表达式１的类型相同；反之，则与表达式２的类型相同。
2.1.7 其他运算
除前面介绍的运算外，还有许多运算，本节只介绍位运算和移位运算。位运算和移位运算实现对二进制位串数据的
运算，主要应用于与计算机内部表示直接有关的运算，读者可以跳过这些内容。
2.2 语句
一个计算过程由一系列计算步骤组成。一个计算步骤或用一个，或用一个计算流程控制实现。程序语言用描述计算
步骤。在 Java 语言中， 语句分为基本语句、控制结构语句以及 package 语句和 import 语句等。其中控制结构语句包括
复合语句、if 语句、switch 语句、循环语句和 try…catch 语句。其中循环语句有 while 语句、do…while 语句、for 语
句三种。
2.2.1 基本语句
基本语句主要有表达式语句、空语句、break 语句、continue 语句、return 语句等。基本语句都以分号为结束符。
1． 1． 表达式语句  表达式语句
在赋值表达式、自增自减表达式和方法调用表达式之后加上分号即变成语句，称它们是表达式语句。例如，表达式
“k++”,写成 “k++;”就是一个表达语句。最典型的表达式语句是赋值表达式构成的语句，譬如：
k=k+2;
m=n=j=3;
赋值表达式语句在程序中经常使用，习惯又称为赋值语句。
另一个典型的表达式语句是方法调用表达式之后接上分号：
方法调用；
该表达式语句虽未保留方法调用的返回值，但方法调用会引起实参向形参传递信息和执行方法体，将使变量获得输
入数据；调用输出方法使程序输出计算结果等。
2． 2． 空语句  空语句
空语句是只有一个分号的语句，其形式为
；
实际上，空语句是什么也不做的语句。语言引入空语句是出于以下实用上的考虑。例如，循环控制结构的句法需要
一个语句作为循环体，当要循环执行的动作由循环控制部分完成时，就不需要有一个实际意义的循环体，这时就需
要用一个空语句作为循环体。另外，语言引入空语句使语句序列中连续出现多个分号不再是一种错误，编译系统遇
到这种情况，就认为单独的分号是空语句。
3． 3． break 语句  break 语句
break 语句必须出现在多路按值选择结构或循环结构中，break 语句的执行强制结束它所在的控制结构，让程序从这
个控制结构的后继语句继续执行。break 语句的书写形式是
break;
break 语句的应用，将在介绍 switch 语句和循环语句时作进一步讨论。
4． 4． continue 语句  continue 语句
continue 语句只能出现在循环结构中，continue 语句的执行将忽略它所在的循环体中在它之后的语句。如果
continue 语句在while 语句或do…while 语句的循环体中，使控制转入对循环条件表达式的计算和测试；如果出现
在 for 语句的循环体中，使控制转入到对 for 控制结构的表达式 3 的求值。简单地说，continue 语句提早结束当前
轮次循环，进入下一轮次循环。continue 语句的书写形式是
continue;
continue 语句的应用，将在循环语句中进一步讨论。
5． 5． return 语句  return 语句
return 语句只能出现在方法体中，return 语句的执行将结束方法的执行，将控制返回到方法调用处。return 语句
有两种形式：
return ; 或 return 表达式；
第一种形式只有用于不返回结果的方法体中，第二种形式用于有返回结果的方法体中。执行第二种形式的 return 语


句时，方法在返回前先计算 return 后的表达式，并以该表达式值作为方法返回值，带回到方法调用处继续计算。
2．2．2 复合语句
复杂计算经常被分解为一个计算步骤序列。整个计算步骤序列在逻辑上是一个整体，要求计算机从计算步骤序
列的第一个计算步骤开始，顺序执行每个计算步骤，直至最后一个计算步骤。
在 Java 语言中，用花括号括住一个顺序执行的计算步骤序列描述顺序结构，这样的顺序结构称作复合语句。复
合语句中的每个计算步骤可以是单个语句，也可以是一个控制结构，特别情况也可以为空。
以交换两个整型变量 x 和 y 的值为例，实现变量x 和y 值的交换可分解为以下顺序执行的三个赋值步骤：
temp =x;
x=y;
y=temp;
把交换变量x 和 y 的值作为一个不可分割的整体来考虑，应把上述3 个语句写成如下形式的复合语句:
{
int temp;
temp = x;
x =y;
y=temp;
}
在构造复合语句时，这完成指定的工作，可能需要临时工作变量。例如，以上例子中的temp 变量。在语句序列中插
入变量定义，引入只有复合语句内的语句可使用的临时变量。用复合语句描述计算步骤序列，并定义自己专用的局
部变量，使复合语句有很强的独立性，它不再要求外面为它定义专用变量。一个计算步骤序列用复合语句描述后，
它已经是一种单个语句。复合语句常被用作其他控制结构的成分语句。
2．2．3 if 语句
根据当前情况选择不同的计算，需用选择控制结构实现。有两种选择控制结构：两路条件选择结构和多路按值
选择结构。
两路条件选择由一个条件和两个供选择的分支语句执行。
两路条件选择结构用 if 语句描述。if 语句根据条件表达式的值为 true 或 false，从两个语句中选取一个语句
执行。if 语句的一般形式为
if(条件表达式)
语句1
else
语句2
if 语句的执行过程是：
(1) 计算条件表达式的值。
(2) 测试表达式的值并选择语句执行。如果表达式的值为 true，则执行语句 1；否则执行语句 2 。
注意，无论条件表达的值是 true 还是false，只执行语句 1 或语句 2 中的一个，不会两个都执行。
当 if 语句中的语句 2 为空语句时，可简写成：
if(条件表达式)
语句
这种形式的if 语句的执行过程是：
(1) 计算表达式的值
(2) 测试表达式的值。若表达式的值为 true，则执行它的成分语句后结束 if 语句。否则，立即结束 if 语句。
在 if 语句中的语句 1、语句 2 可以是任何语句。当它们中的某一个是由多个语句组成时，必须将它们用花括号
括住。
当 if 语句中供选择的语句又是 if 语句时，if 语句就呈嵌套的形式，这时应注意 else 与 if 的对应关系。java
语言约定：else 与它前面最接近的 if 对应。
2．2．4 switch 语句
经常遇到这样的选择控制，对变量表达式的每一个可能的值分别作不同的计算。如果用两路条件选择结构描述这样
的选择控制，由于要逐一测试是否等于某个值，if 语句嵌套的层次就很深，程序的可读性和可修改性也很差。多路按值
选择结构可避免这个问题。 表达式的值的类型只能是 char,byte short int 类型 。



在 Java 语言中，用switch 语句描述多路按值选择结构。switch 语句包含一个表达式，用于按表达式值的不同作相
应选择。另外，还有一系列由 case 开头的子句和一个可选的 default 开头的子句，每个子句有一个可能为空的语句序列。
switch 语句一般形式为：()
switch(表达式){
case 常量表达式 1：语句序列1;break;
case 常量表达式 2：语句序列 2;break;
case 常量表达式 n: 语句序列 n;break;
default: 语句序列 n+1;break;
}
2.2.5 try…catch 语句
try{
语句块//执行该语句块，可能会发生异常
}catch(异常类型 e){
异常发生时要执行的语句；
}finally{
无论异常发生与否，都要执行的语句。
}
一个try 可以有多个 catch 和它标识的语句块。 catch 的内容可以为空，但是{}不可省。
2．2．6 while 语句。
2．2．7 do…while 语句。
2．2．8 for 语句
2．2．9 嵌套的循环结构
2．2．10 循环体内的 continue 和break 语句
2．2．11 package 语句
package 包名；
package 语句必须出现在源程序文件的起始行，表示出现在该文件中的所有类都属于这个程序包。如果有多个源程
序的程序包声明使用相同的包名，则表示这些源程序文件中的全部类都属于这个程序名。包名是一个目录名，其中也可
以有路径。如果 源程序文件的首行没有 package 语句，则被默认为是无名包，存于当前目录中。
2．2．12 import 语句
import 语句用于引入所需要的类。import 语句的格式为：
import 包名.类名；
如果要从一个包中引入多个类，则可以用通配符“* ”。
在一个 Java 源程序中可以有 多个 import 语句 ，它们必须出现在  package 之后 ， 类的定义之前 。
2．2．13 java 应用程序的基本结构
[package 包名；]
import 包名.类名；
…
[public] class 类名{
int val= …
public static void main(String args[])
{
…
}
}
java 程序由 类和对象 构成，而 类又由方法和变量 构成。java 的方法由 语句 构成，而语句又由 标识符和运算符 构成。


3．１面向对象的基本概念
自计算机诞生到现在，程序设计语言发展经历了面向机器、面向过程和面向对象３个阶段。面向机器阶段用机器指
令，即机器语言，或用助记符代替机器指令的汇编语言编写程序。使用 面向机器的语言编写程序，编程模式是：
程序＝数据＋指令
编程时，需要考虑的内容包括计算机的硬件特性、数据位置安排、Ｉ/Ｏ设备的控制细节等。这类程序的缺陷是程序
的可读性、可维护性、可移植性极差，因此编程效率很低。面向机器语言主要应用于一般的科学计算和简单控制处理。
面向过程阶段是使用高级程序设计语言编程，有代表性的语言有 FORTRAN、PASCAL、C、COBOL 等。用面向过程语言
编程，编程模式是：
程序＝数据结构＋算法
编程时，需要考虑的内容是程序做什么、怎么做，重点考虑每个实现细节。采用的主要技术是结构化控制结构和模
块化设计。这类程序除科学计算外，大量应用于一般的应用程序开发。这种编程技术的缺陷是不适宜应用于图形用户界
面、事件驱动编程，难以开发超大规模的应用程序，特别是随着程序规模的进一趟扩大，系统变和非常难以维护。
面向对象阶段是目前正广泛流行的编程方法。面向对象编程语言有Smalltalk、C++、Java 等。面向对象编程语言提
供一种全新的编程技术。用面向对象编程，编程模式改为：
程序＝对象＋消息
程序设计者考虑的是对象的描述、对象间的关系、类的管理、什么时候和什么地方调用对象的哪一种方法。面向对
象编程的适应范围大大扩大，能适用于大规模应用程序的解决方案、网络计算等。对于编程者来说，最大的优点是面向
对象编程能有效支持重用，使超大规模的程序也变行相对容易维护。
面向对象程序设计语言引入许多概念和机制，包括 抽象、对象、消息、类、继承、多态性等。本节先介绍这些概念
和机制，随后将详细介绍 Java 语言如何体现和应用这些概念和机制。
1．抽象
抽象（abstraction）是程序设计中最经常使用的技术之一，因为 抽象 是有效控制程序复杂性的重要手段。在设计初
始阶段，采用自顶向下的设计方法，暂时不关心具体细节，首先设计出抽象的算法；随后，抽象的算法步骤逐步被
具体的实现替换。程序设计中利用抽象，在面向过程阶段，系统按函数和模块进行设计。在面向对象阶段，利用抽
象按 类设计。 类是目前支持 抽象的最好工具。
2．对象
在实际生活中，人们每时每刻与对象打交道，例如，汽车、自行车，在特定的应用领域都是对象（Object）。这些现
实世界中的 对象都有 状态、行为和名称。例如，自行车的品牌、两个轮子的尺寸、行进中的速度等能描述自行车的
状态；自行车提供包括加速、减速、刹车等行为。在面向对象语言中，对象的名称用于程序引用对象，对象的成员
变量，用于存储对象的状态信息，对象的方法用于描述对象的行为
对象的名称用于程序引用对象，对象的成员
变量，用于存储对象的状态信息，对象的方法用于描述对象的行为。
3．消息
一个应用程序总会包含许多对象，通过这些对象之间的交互，实现更高级、更复杂的行为。例如，小张用他的
自行车上学读书，在上学的过程中，小张骑着自行车，一会儿让车加速，一会儿让车减速，一会儿又刹车。总之，
一路上，小张与他的自行车一直在进行交互，直到学校。
在程序系统中， 对象之间的交互通过 相互发送消息（Message）实现。当对象Ａ希望对象Ｂ执行Ｂ的一个方法
时，用对象Ａ发送消息给对象Ｂ来实现。消息发送时，如果还需要其他参数，消息可带参数一起发送。
4．类
通常程序系统中会有许多同样类型的对象。例如，每个同学都有一辆自行车。尽管每辆自行车的主人不同，各
自行车当时所处的状态不同，但是，自行车所包含的属性、自行车能提供的行为是相同的人们可以统一给出同类对


象的各项属性和能提供的所有行为，据此，区别自行车和汽车是不同种类的对象。如同避免重复描述每辆自行车的
属性和行为一样，为了避免程序逐一描述同类中的每个对象的所有属性，详细给出对象的每个方法的描述，把同一
类对象的所有共同的属性和行为放在一起描述。这种声明对象共有属性和行为的机制称为
把同一
类对象的所有共同的属性和行为放在一起描述。这种声明对象共有属性和行为的机制称为 类。类的声明定义了类的
所有对象的共有的属性和方法。这样，如果程序声明了自行车类的共有属性和方法，则小张的自行车是自行车类一
个实例。如果程序需要，可随时由自行车类创建小王的自行车、小李的自行车等。所以类是对一组相同对象的描述，
类概括了同类对象的共有性质： 数据和方法。类的每个对象都有自己的标识，但它们具有相同的一组属性和提供相
同的一组方法
类的每个对象都有自己的标识，但它们具有相同的一组属性和提供相
同的一组方法。
5．继承
除对象按类划分外，不是同一类的对象可能会存在某些相似性。 继承（Inheritance） 就是在已有类基础上，扩充属
性，或
扩充属
性，或 扩充与改写 其某些方法，生成新的类，这个方式称为 继承。继承定义的类称为子类，被继承的类称为超类（父
类）
超类（父
类），子类自动含有父类具有的属性和方法。继承具有传递性。例如，自行车可分为山地自行车、比赛用自行车等。
山地自行车、比赛用自行车都是自行车类的子类。所之，自行车类是山地自行车、比赛用自行车的超类。超类声明
定义共同的特性，子类继承超类的共有特性，还可增加某些特殊性，并可扩充和修正部分行为。
超类声明
定义共同的特性，子类继承超类的共有特性，还可增加某些特殊性，并可扩充和修正部分行为。如同大家非常熟悉
的几何图形，抽象的几何图形有位置、面积等共同特性，有求面积等方法。四边形、三角形、点都是几何图形的子
类。同样四边形又可以有普通的四边形、长方形、菱形等。采用继承声明定义的子类可以有父类的属性和方法，也
可以增加新的属性和方法，并可以对父类的某些方法给出新的定义。例如，各种类别的几何图形有不同的求面积的
方法。继承的 最大好处是 对象能按层次划分，并在子类中，与父类相同的属性和方法可以不再重复声明。继承体现
了面向对象方法与现实世界中人们的抽象思维方式保持一致。
6．多态性
多态性（Polymorphism）有多种表现形式，这里所说的 多态性是指类型适应性多态性，这来自继承，不同继承
层次的对象对同样的方法有不同的实现
是指类型适应性多态性，这来自继承，不同继承
层次的对象对同样的方法有不同的实现。类型适应性多态性要求自动按对象的实际类型正确调用它的方法。例如，
各类几何图形构成一个继承体系，每种几何图形有特定的求面积方法。一个以几何图形对象为参数的方法 f()运行
时，如果需要求这个参数对象的面积，系统根据对象的实际类型，自动按实际对象的类型选取正确的求面积方法。
在方法 f()运行之前，只知道参数将对应一个几何图形对象，不知道它是三角形、圆，还是其他别的几何图形。这
样，在方法f()运行之前不能确定参数的求面积方法。这种多态性要求直至方法f()运行时，知道了与参数对应的实
际对象的类型，才确定求面积方法。这种类型适应性的多态性需要采用动态联编（Dynamic Binding）技术实现。
联编是将发送给对象的 消息与含执行该消息方法的 对象连接起来。当联编在 编译和连接阶段 实现时，这样的联
编过程称为 静态联编；当 联编推迟至 运行时间 实现时，该联编过程称为 动态联编。动态联编是面向对象语言必须具
有的一种能力，是实现上述多态性的技术基础。




３．２．１ 类
类是一种类型，类封装对象的属性和方法，是同一类对象的模板。Java 程序的主要部分是描述类。



１． 类的声明
声明一个新类的基本格式如下：
class 类名//声明新类的基本格式
{
类体
｝
其中关键字 class 引导一个类的声明，类名是一个标识符。类体给出类的成员变量定义和方法定义，其中类的成员
变量用于存储对象的属性，方法描述对象的行为。类体中 不能有 独立的执行代码， 所有的执行代码 只能出现在方法中 。




２． 成员变量
成员变量定义的一般形式如下：
[修饰字] 类型 变量名；
其中，修饰字可以空缺，修饰字用于对成员变量限制其访问权限，成员的访问权限有 ４种：private、protected、
public 和友好的
private、protected、
public 和友好的，参见3.2.5 节。变量的类型可以是任何数据类型，变量的名字是一个标识符。Java 中 成员变量的名字
可以与类的 方法的名字 相同。
成员变量对类内定义的方法都有效。类的方法中也可定义变量，这种变量称为局部变量，局部变量只在定义它的方
法中有效。


３． 方法
方法给出对象的行为，方法的声明如同Ｃ语言函数定义。方法声明的一般形式如下：
返回值类型 方法名（类型 参数名，…，类型 参数名）
｛
方法体
}
返回值类型声明方法返回值的数据类型。如果方法无返回值，就用void 关键字。方法可以没有参数，多个参数
用逗号分隔，参数类型可以是任何数据类型。



如果某方法中的 参数名或局部变量的名 与 类的成员变量的 名相同，则 成员变量在这个方法内暂时被 隐藏。例如，
在以下类Ｂ的声明中，方法u()中的参数x和y与成员变量x和y同名，方法u()中的x和 y引用的参数 x和 y。
如果 成员变量 在方法内被 隐藏 ，又在方法中要引用成员变量，必须使用  this（参见 3.2.7 中关于关键字 this的叙述），s this  表示调用该方法的 当前对象。



参数名和局部变量名可随意命名，建议尽量使用互不相同的名。
在 Java 程序中，类的方法可以重载。 方法重载是指在 一个类中 定义多个相同名字的方法，但这些方法或者参
数
方法或者参
数 个数不同 或者顺序参数的 类型不同。

编译器将根据方法调用时的 参数个数和参数类型及顺序确定调用的是哪一个方法。例如，调用方法 fun()时，
如果提供一个 float 参数，则是调用第一个 fun()方法，如果参数有两个，且第一个是 float 参数，第二个是
int 参数，则是调用第二个 fun()方法。方法参数的名称不能用来区分重载方法。



构造方法是一种特殊的方法，这种方法的名与它的类名相同，并且不返回结果，也不写上 void 关键字。 构造
方法的作用 是创建类的对象， 并给对象初始化。 构造方法是 公共方法， 但程序 不能显式调用 构造方法。程序运
行时，当有对象要创建时，由系统自动调用构造方法。


如果类的声明没有定义构造方法，系统就增补一个没有参数的默认构造方法。

３.2.2 对象
类被声明后，就可用类创建对象，被创建的对象称为类的实例。程序使用对象需依次经历４个步骤： 声明 对象、创
建
创
建 对象、 使用 对象和 撤销 对象。
１． 声明对象
由于类是一种引用类型（参见节后面叙述的对象的内存模型），声明对象只是命名一个变量，这个变量能引用类的对
象。由于对象还没有创建，所以也暂不要为对象分配内存。声明对象的一般形式为：
类名 对象名；
例如，代码：
Point p1,p2;
这里的Point 是前面声明的类名，上述代码声明p1,p2 两个对象。
２． 创建对象
创建对象就是为对象 分配内存，为对象分配内存也称为类的 实例化。一般形式为：
new 构造方法([参数表])
其中参数被构造方法用于给对象设置初值。例如，代码：
p1 = new Point();p2= new Point(30,40);
对象p1 用无参数的构造方法初始化，使p1 的x 坐标为10,y 的坐标为20，对象p2 用带两个参数的构造方法初始化，
使 p2 的x 坐标为 30,y 坐标为40。
对象创建的两个也可一起完成，一般格式为：
类名 对象名 ＝ new 构造方法（[参数表]）
例如，代码：
Point p3 = new Point(),p4=new Point(60,70);
同时创建两个 Point 对象，p3 的坐标为 10，y 的坐标为20;p4 的坐标为 60,y 坐标为 70。
３． 对象的内存模型
Java 语言将类型分成 基本类型和引用类型两种。第２章介绍的整型、浮点型、字符型等是基本类型，程序引用这种
类型的变量，采用直接访问形式。
在 Java 语言中，数组类型和类类型是引用类型。程序访问引用类型的变量采用间接访问方式。
４． 使用对象
程序使用对象有多种情况：或为对象 设置状态、或 获取对象的 状态、或 改变对象的 状态、或 应用对象的某种 方法。
前三种需要访问对象的成员变量，最后一种要调用对象的方法。程序通过操作符“. .”对某对象的成员变量进行访问
和方法调用。一般形式为：
对象名.成员变量
对象名.方法（[参数表]）




类的成员变量又分为实例变量和类变量。在定义成员变量时，用关键字  static 修饰的是 类变量，定义时未用
static 修饰
未用
static 修饰的是 实例变量。例如，以下代码定义成员变量x 是实例变量，成员变量 y 是类变量。
class D{
float x;
static int y;
…
}
由前面的示例程序看出，程序定义的每个对象都有自己的实例变量。例如，前面程序中，对象 p1,p2,p3 和 p4
都有自己的实例变量 x 和 y。类变量是类的所有对象共享成员变量，一个类变量在类中只有一个，它属于整个类，
而不属于类的某个对象。 引用 类变量途径有两条，或 通过类，或 通过对象，格式如下：
类名.类变量名 或 对象名.类变量名
不同对象的实例变量将被分配不同的内存空间。改变类的某一个对象的实例变量的值不会影响其他对象的实例
变量。
类变量的 内存只有一处 ，让类的所有对象共享。从类的任一对象改变类变量，类的其他对象都能发现这个改变。





３．２．４ 实例方法和类方法
如同类的成员变量有实例变量和类变量两种一样，类的方法也有两种：实例方法和类方法。在方法定义时，冠以修饰字
static 的方法称为类方法，没有冠以static 修饰字的方法是实例方法。




类中的实例方法可以互相调用，并可调用类方法。 类方法也能相互调用， 但不能直接调用实例方法， 除非类方法引
入局部对象
引
入局部对象，然后 通过局部对象调用实例方法。另外， 类方法能 直接引用 类变量， 不能引用 实例变量。实例方法可引用
实例变量，也可引用类变量。例如 ，例 3.8 给出的类声明中有些是合法的代码，而有些是不合法的代码。


实例方法可以访问类变量和当前对象的实例变量。 实例方法必须通过对象调用，不能通过类名调用。类方法只能类变量， 不能够访问实例变量。类方法除了可以通过实例对象调用之外，还可以通过类名调用。



 
由于 java 系统内设废弃内存回收程序，所以一般情况下，一个对象使用结束后，程序不必特别通知系统撤销对象。但有
时为提高系统资源的利用率，程序也可通过调用方法 finialize() 显式通知系统， 请求系统撤销对象。
3．2．5 访问权限
访问权限实现访问控制。在类的成员中引入权限控制，保护类的成员不在非期望的情况下被引用。在类声明中，除
了类中方法总能访问类的成员变量外，Java 语言为其他类的方法访问本类成员变量和方法，提供以下 4 种访问权限：
public:设置没有限制的访问权限，其他类的方法都能访问。
private：设置最强限制的访问权限，其他类的方法都不能访问。
protected:只限于 子类和同一包中的类的方法能访问。
<default>：(无修饰，友好的) 只允许同一包中类的方法访问。
1． 1． public(共有)  public(共有)
类的成员变量被设置成 public 访问权限，则类外的任何方法都能访问它。这样的成员变量就没有任何安全性，在应
用程序中很少使用。通常，只有为对象设定的功能性方法被设置 public 访问权限，让类外的方法可以通过对象调用
这样的方法，让对象完成它的服务功能。
2． 2． private(私有)  private(私有)
类的成员变量被设置 private 访问权限，则类外的任何方法都不能访问它。方法被设置成私有的，通常这些方法是
类内部专用的方法。类通常另定义一些public 访问权限的方法，通过这些方法访问的成员变量，这样的成员变量的
安全性能得到有效的保证。



3． 3． protected(受保护)  protected(受保护)
受保护访问权限是一种公有权限和私有权限之间的访问权限。例如，在类A 的声明中，成员x 被定义成是受保护的，
则类A 的子类和与类 A 同一包中的别的类可以访问类A 的受保护成员 x；但对于不是类A 的子类或与类 A 不在同一包
中别的类来说，不可访问受保护成员 x。通常同一包中的一些类与定义受保护成员的类有许多相关性，为了提高系统
的效率，让这些相关类的方法可直接访问，这样的成员可考虑设置受保护访问权限。
4． 4． 友好变量和友好方法  友好变量和友好方法
没有修饰的成员变量和方法称为友好变量和友好方法。与受保护访问权限比较，如果只允许同一包中的相关类的方
法访问，不让类的子类和其他类的方法访问时，可设置成友好变量和友好方法。
在同一源程序文件中的类，总是在同一包中，如果声明类 A 的源文件中用 import 语句引入了另外一个包中的类
C，并用类C 创建了一个对象 c，那么对象 c 将不能访问类A 的友好变量和友好方法。如果一个类被修饰为 public 的，
那么可以在任何另外一个类中使用该类创建对象。如果一个类不加任何修饰，那么在另外一个类中使用这个类创建
对象时，要保证它们是在同一包中。




3．2．6 继承
继承是面向对象语言的重要机制。借助继承，可以扩展原有的代码，应用到其他程序中，而不必重新编写这些代码。
在 java 语言中， 继承是通过扩展原有的类，声明新类来实现的。扩展声明的新类称为子类，原有的类称为超类(父类)。
继承机制规定，子类可以拥有超类的所有属性和方法，也可以扩展定义自己特有的属性，增加新方法和重新定义超类的
方法。
java 语言 不支持 多重继承，限定一个类只能有一个超类。在子类声明中加入 s extends 子句来指定超类。格式如下：
class 子类名 extends 超类名
{ 
类体
}



 例如，代码：
class E extends D
{…}
声明类 E 的超类是类 D，这里假定类 D 已在某处声明。类声明时，如果缺省 extends 子句，未指定超类，则该类的超类
是系统声明的类 java.lang.Object.
子类对父类的继承性， java 语言作以下规定：
子类自然地继承其父类的 不是 private 的成员变量 作为自己的成员变量，并且自然地继承父类中e 不是 private  的方
法 作为自己的方法。


为了构造和编写面向对象程序的需要，Java 语言还引入一些非常用用的机制。本小节介绍其中对程序构造和编写比
较有用的一些机制。



1． 1． final 类、final 方法和 final 变量  final 类、final 方法和 final 变量
final 的意义是 最终的，用于修饰类、方法和变量，其意思是“ 不能改变”。 禁止改变可能是考虑到“设计”和“效
率”两个方面。
在类声明之前用 final 修饰，声明类是final 类，final 类是 不能被再继承的类，即它 不能再有子类。例如，以下代
码声明类 C 是 final 类：
final class C{
…
}
用 final 修饰的变量，声明该变量的值不能被改变。不能被改变的变量相当于一个常量。final 变量主要用于以下两
个方面
两
个方面： 或是一个编译期的常数， 它永远不会改变 ；或在初始化后， 不希望它再改变。例如，以下代码声明 FINALVAR
是一个final 变量：
final int FINALVAR = 100;
final 局部变量在定义时可以暂不设定初值，但是一经初始化，以后就不能再改变。例如，以下代码：
final int AFINAL;
… …//假设这里的代码没有对AFINAL 赋值
AFINAL=1;//以后不能再给 AFINAL 再赋值
常用final 声明常量，常量名习惯全部用大写字母命名。
2． 2． abstract 类和 abstract 方法  abstract 类和 abstract 方法
abstract 类称为抽象类。抽象类只声明一种模板，没有具体实现代码的类。只有它的 子类才能是有实际意义的类。
所以 抽象类 不可 有实例。即不能用抽象类声明或创建对象。
abstract 方法称为抽象方法。抽象方法只能出现在抽象类中，抽象方法没有实现的代码。如果一个类是抽象类的子
类，则必须具体实现超类的抽象方法。 抽象类 可以没有 抽象方法，但 有抽象方法的类 一定 是抽象类。







 关键字 super  关键字 super
子类隐藏了超类的成员变量或者 覆盖了 超类方法后，利用关键字 super，子类方法可以引用超类的成员变量和被覆盖
的方法。使用super 有 3 种情况：使用super 调用超类的构造方法，参见多层继承中构造方法的调用顺序；使用 super
调用超类被子类覆盖的方法；使用 super 访问超类被子类隐藏的成员变量。


 关键字 this  关键字 this
关键字 s this 用来指 对象自己。s this 的作用有多种，例如，将对象自己作为参数，调用别的方法；当方法的局部变量
隐藏成员变量时，利用 this
当方法的局部变量
隐藏成员变量时，利用 this  引用 成员变量；在构造函数内 调用 另一构造函数等。参见以下示例。
Class B{
int b,c;
B(){this(2,3);}
B(int x,int y){b =x ;c=y;}
}





3.3 接口
Java 程序中的类只能继承一个类，这种继承称为单继承。Java 语言虽不允许一个类继承多个类，但允许一个类实现多个
接口。接口(Interface)有与类相似的基本形式。 接口有常量定义和方法定义，但没有方法的实现代码。可以将接口想象
为一个“纯“抽象类。接口给出某种特定功能的一组方法的规范，而并未真正地实现每个方法，方法的实现要在实现这
个接口的类中完成。接口也是对一些类为实现某些控制所建立的一个”协议“。例如，为键盘操作建立一个键盘操作，

 


定义了响应键盘操作的一组方法，给出每个方法的规范：方法的名称、返回值类型，参数个数与参数类型。实现键盘控
制的一些类，加为它们对键盘操作的目的各有不同，各有不同的实现方案，但都必须按接口给定的规范给出自己的实现。
形象地说，接口对实现接口的类提出这样的要求：“实现我的所有类，都应该包含像我现在这种样子，并给出方法的全部
实现 ”。
类除了能继承一个类之外，还可实现多个接口。这样，对有继承并实现接口的类来说，实际上有了多个超类，实现有控
制的多重继承。
接口的优点是很明显的。例如，在程序开发的早期建立一组协议而不给出具体实现，便于设计更合理的类层次。所以，
接口比多继承更强、更容易控制。
1． 1． 接口的定义  接口的定义
接口定义包括接口声明和接口体两部分。一般形式如下？
[public]interface 接口名 [extends 超接口表]{
接口体
}
接口名通常以e able 或 ible  结尾，意指能做什么。接口是一种只由常量定义和抽象方法组成的特殊类。public 修饰
的类是公共接口，可以被所有的类和接口使用；而没有 public 修饰的接口只能被同一个包中的其他类和接口使用。
2． 2． 接口体  接口体
接口体中的内容是一系列常量定义和方法定义。其中方法定义是一种方法声明，不提供方法的实现(没有方法体)，
用分号“；”结尾。方法的实现在“使用”这个接口的各个类中，故称使用接口的类为接口的实现。以下是一个
接口定义的示例：
interface Sleepable{
final int max=100;
void sleepSometime(int deltaT);
float work (float x,float y);
}
接口 的 所有变量 都默认为 c final static  属性；所有的 方法 都默认为是 t public abstract  属性。
一个类通过使用关键字 implements 声明自己使用一个或多个接口。实现多个接口时，接口名之间用逗号隔开。
以下示例代码说明类Pig 继承类Animal 并实现两个接口 eatable 和 sleepable。
class Pig extends Animal implements Eatable, Sleepable
{…}
如果一个类要实现某个接口，那么这个类 必须实现该接口的所有方法 ，为这些方法实现的方法体。在实现接口
的方法时，方法的名字、返回值类型、参数个数及类型必须与接口中的定义的方法完全一致，并
在实现接口
的方法时，方法的名字、返回值类型、参数个数及类型必须与接口中的定义的方法完全一致，并一定要用 public
修饰
一定要用 public
修饰 。如果接口的方法的返回值类型不是 void,那么在实现该方法的体中至少要有一个 return 语句；如果方法
不返回值，则为 void 类型，类体除了两个大括号外，可以没有任何语句。




基本类型值与对应基本类对象能相互转换。可以利用以下形式的基本类构造方法，由基本类型值得到对应基本类对象：
public 基本类(基本类型 v)
例如，以下代码得到一个Integer 对象，其值是 123
Integer n = new Integer(123);
也可以 由基本类对象得到基本类型值。实现方法如以下例子所示：
设有 Double 类对象dObj，Boolean 类对象bObj,代码：
double d = dObj.doubleValue();
使得 dObj 对象的值赋值给 double 类型变量d。代码：
boolean b = bObj.booleanValue();


bObj 对象的值赋值给 boolean 类型变量 b。类似的代码可以用于其他类对象与对应的基本类型变量。
3．5 Java 小应用程序基础
Java 小应用程序即 Java Applet，是嵌入在 Web 面上供浏览器运行的程序，可放在服务器上供客户端下载使用。小
应用程序的主要功能是显示图形、动画、播放声音、响应用户事件等。每个小应用程序都继承 java.applet.Applet 类。
如果小应用程序已用import java.applet.Applet 导入系统的 Applet 类，小应用程序的主类必须按以下形式声明：
public class 主类名 extends Applet
如果没有用import 导入系统 Applet 类，则主类的声明应写成：
public 类名 extends java.applet.Applet
为了系统的安全，对小应用程序有一定限制: 不能 调用本地的 应用程序 和运行时的 动态连接库； 不能 访问 本地文件，如读、
写文件； 除原小应用程序所在的位置(站点)外， 不能再做 网络连接与 WWW 建立联系， 不能 获得任何有关系统设置的信息。




一个小应用程序从建立到运行需经历 4 个步骤：
(1) (1) 用 Java 语言编写小应用程序的源程序。  用 Java 语言编写小应用程序的源程序。
小应用程序由若干类组成，在源程序中必须有一个类继承 java.applet.Applet 类，这个类是小应用程序的主类。小
应用程序的主类，用public 关键字修饰。小应用程序的源文件名必须与它的主类名完全相同。
(2) (2) 把小应用程序的源程序编译成字节码.class 文件。  把小应用程序的源程序编译成字节码.class 文件。
如果源文件有多个类，那么经编译后将生成多个.class 文件。


(4) (4) 在支持 Java 的浏览器上运行。  在支持 Java 的浏览器上运行。
或用观察器 appletviewer，或用 Netscape、Hotjava、IE 等。如果采用某个 Java 开发环境。也可在开发环境下执行小
应用程序。
2． Applet 类的基本方法
(1)init()方法
2． Applet 类的基本方法
(1)init()方法
初始化，由浏览器载入内存时调用 init()方法， 该方法 只运行一次。其用途是创建所需要的对象、设置初始状态、装载
力图像、设置参数等。
(2)start()方法
初始化后， 紧接着调用 start()方法、启动小应用程序主线程，或当用户从小应用程序所在的 Web 页面转到其他页面，
然后又 返回该页面时， start()方法将再次被调用 。
(3)stop()方法
当 浏览器离开小应用程序所在的页面 转到其他页面时，调用 stop()方法，挂起小应用程序的执行。
(4)destroy()方法
当关闭浏览器时
(4)destroy()方法
当关闭浏览器时，系统调用  destroy()方法，结束小应用程序的生命，关闭线程释放对象资源。

 

(5) (5) paint(Graphics g)方法  paint(Graphics g)方法
该方法用于在屏幕窗口上显示某些信息。如文字、色彩、背景和图像等。当小应用程序启动时，浏览器产生一个 Graphics
类的对象，供小应用程序使用，并以参数 g 传递给方法 paint()。小应用程序可以把 g 理解为一支画笔。
小应用程序主类的程序结构如下：
public class AppletName extends java.applet.Applet{
public void init(){…}
pulic void start(){…}
public void stop(){…}
public void destroy(){…}
public void paint(Graphics g){…}
…
}
(6) (6) repaint()方法  repaint()方法
为在 java 页面上显示动态效果，需要 repaint()方法，repaint()调用 update(),repaint()先清除 paint()方法以前所
画的内容，然后再调用 paint()方法。
在例 3.20 的小应用程序中，start()方法调用 repaint()方法，因此每当小程序调用 start()方法时，将会导致以前用
paint()方法所画的内容消失，并紧接着再调用 paint()方法。由于 paint()方法对显示字符串的位置有修改，这样每当
调用 start()方法时，字符串的显示位置会移动。
(7) (7) update()方法  update()方法
调用repaint()方法时，系统会自动调用 update()方法。update(Graphics g)方法是从父类 Applet 继承来的，该方
法的功能是清除 paint()方法以前所画的内容，然后再调用 paint()方法。小应用程序重写 update()方法，可以达到
特定的要求。参见7.2.1 例 7.3。
3．小应用程序的生命周期(执行过程)
(1)下载并实例化小应用程序，系统调用 init()方法。
(2)启动，系统调用start()方法。
(3)小应用程序暂停执行，或因Browser转向其他网页，或小应用程序调用stop()方法，或小应用程序执行paint(Graphics
g)方法
(4)重新启动，或重新进入小应用程序所在页面，重新激活小应用程序，或小应用程执行 paint(Graphics g)方法完成。
(5)终止，或退出浏览器，或执行destroy()消亡方法。
当浏览器打开超文本文件，例如 Example3_20.html,发现有 APPLET 标记时，就创建主类 Example3_20 对象，该对象是小
应用程序主类的实例，具体表现是一个视窗。视窗是一个容器，它的大小由超文本中的width 和 height 来确定，参见第
5 章。

 4． 小应用程序数据输入输出  小应用程序数据输入输出
小应用程序的数据输入有多种方式。从图形界面的文本框、文本区输入；也可以采用系统标准输入；还可以由 HTML 文件


中的参数导入。
这里只小应用程序从它的 HTML 文件导入 参数的方法。设小应用程序有以下成员变量定义：
int sleepTime;String filename;
该小应用程序的 HTML 文件 用以下形式的代码指定小应用程序主类成员变量 sleepTime 与 fileName 的值：
<PARAM NAME = “sleepTime” VALUE= “1000”>
<PARAM NAME = “filename” VALUE = “mypic.jpg”>
小应用程序在 init()方法中可帮以下代码读取上述两个成员变量的值：
String s = getParameter(“sleeptime”);
sletpTime = Integer.parseInt(s);
fineName = getParameter(“filename”);
小应用程序在窗口中输出数据，需要重新设计 paint()方法。该方法主要调用 drawstring()方法。调用 drawString()
方法的格式如下：
g.drawString(string,xPos,yPos);
参数 string 是要输出的字符串，xPos 和 yPos 是字符串在输出窗口的像素坐标。





４．１ 数组
数组是将一组相同类型的数据顺序存储，组成一种复合数据类型。数组的特点主要是：一个数组中的所有元素的数
据类型相同，数组中的元素连续顺序存储，数组中每个元素按存储顺序对应一个下标，下标从０开始顺序编号，引用数
组元素通过数组名和它的下标确定。数组有一维数组和多维数组之分，数组元素的下标个数确定数组的维数。



一维数组
数组元素只有一个下标的数组是一维数组。




1． 1． 声明一维数组  声明一维数组
在 Java 语言中，数组是一种引用类型，数组名如同对象名一样，是一种引用。声明数组是声明一个标识符能引用数
组，只要指定数组元素的类型。声明一维数组有两种格式：
数组元素类型 数组名[]; 或者 数组元素类型[] 数组名；
float boy[];double girl[];char cat[];
Student stu[];//与Student[] stu; 等价

  

2． 2． 创建一维数组  创建一维数组
创建一维数组就是为数组分配存储空间，需指定数组长度。数组创建后，数组名就标识用于存储数组元素的存储空
间。创建一维数组的方法有３种：
（1） 先声明后创建
创建数组代码的一般形式为
数组名字 ＝ new 数组元素类型[元素个数];
例如，代码：
int intArray [];
intArray = new int[5];
（2） 声明时创建
把声明数组和创建数组的代码结合在一起。例如，代码：
int intArray[] = new int[5];
（3） 直接赋值创建
在声明数组时，直接给出数组的初值。例如代码：
int [] intArray = {1,2,3,4,5};
直接赋值创建数组的方法也称为数组初始化。在数组初始化的代码中，花括号{}，内初值间的分隔符是逗号”,”。
系统根据数组初始化时，提供的初值个数确定数组的元素个数，然后为数组分配空间，并为数组各元素依次赋初值。
上述代码相当于：
int intArray[] = new int[5];
intArray[0]=1; intArray[1]=2; intArray[2]=3; intArray[3]=4; intArray[4]=5;
前两种方法创建数组时，系统会给数组元素提供默认初始值：数值型数组元素的默认值是０；char 类型数组元
素的默认值是全０代码字符；布尔类型数组元素的默认值是 false。
在 Java 中，所有数组都有一个成员 length，程序可以访问它，获得数组的元素个数，但不能改变它。例如，
按照前面数组 intArray 的定义，intArray.length 的值是５。
3． 3． 引用一维数组元素  引用一维数组元素
引用一维数组元素代码的一般形式为
数组名[下标]
数组下标可以是整型常数，或者是整型表达式。例如：
intArray[3]=25;
数组下标范围是 ０到数组名.length-1。为了确保程序安全性，Java 运行系统对数组下标自动进行范围越界检查。
如果发现下标越界，系统将发生异常。
4． 4． 数组是一种引用类型  数组是一种引用类型
数组也是一种引用类型，一个数组名在不同时间可引用不同数组。参见例４.2。代码：
myArray =firstArray;



myArray = secondArray;
４．１.2 多维数组
数组元素有多个下标的数组就是多维数组。多维数组是一种数组的数组，例如，当数组的元素又是一维数组时，就
是一个二维数组。在Java 程序中，可以有三维数组，或四维数组等。以下以二维数组为例说明多维数组声明、创建和引
用的方法。
1． 1． 声明二维数组  声明二维数组
声明二维数组的一般形式有以下３种：
类型 数组名 [ ][ ]
类型 [ ][ ] 数组名
类型 [ ] 数组名 [ ]
类似的代码可以声明多维数组。
2． 2． 创建二维数组  创建二维数组
创建二维数组对象的方法有多种：
（1） 直接分配（平衡二维数组――矩阵）
类型 数组名[][]=new 类型[长度１][长度２]
例如，以下代码创建一个３行３列的矩阵：
int myTowArray[][]= new int[3][3];
（2） 从最高维开始，分别对每一维分配不等长的空间（非平衡数组）
以二维数组为例，先指定第一维，创建有指定子数组个数的二维数组然后，依次对每个子数组确定元素个数，并创建子
数组。例如，以下代码创建一个二维数组 a[][]，它有３个子数组，第一个子数组有４个元素，第２个子数组有５个元
素，第３个子数组有２个元素：
int a[][] = new int[3];
a[0]= new int [4];
a[1]=new int[5];
a[2]=new int[2];
（3） 直接赋值创建
声明二维数组，同时直接给出各子数组的元素。如果子数组的元素个数不同，则创建是一个非平衡的二维数组。例如，
代码：
int [][]x = {{5,6,7},
{8,9,10,11},
{18,19,20,15},
{2,9}
};
3． 3． 引用二维数组  引用二维数组
二维数组元素的引用方式是：
数组名[下标１][下标２]
其中下标１是第一维下标，下标２是第二维下标。例如，对上述二维数组 x,x[0][1]是６，x[2][3]是 15。




4． 4． 使用二维数组要注意的问题  使用二维数组要注意的问题
对于二维数组，要注意以下两点：
（１） 二维数组名，length 和二维数组名[下标１].length 的区别。二维数组名.length 是二维数组的 子数组个数；二
维数组名[下标１].length 是指定子数组的元素个数。
（２） 二维数组名[下标]是一维数组。





４．２字符串
字符串是由０个或多个字符组成的序列，Java 语言提供两个用于处理字符串的类：
g String 类用于处理 不可变的字符串。r StringBuffer 类用于处理 可改变的字符串。
４．２．１字符串常量
字符串常量是用 双引号 括起来的一个字符串。例如，“我正在学习Java 程序设计”、”１２３.４５６”。在 Java
语言中，字符串常量是匿名的 String 对象。
４．２．２ 字符串声明和创建
如同一般用类声明和创建对象一样，可用 String 类声明和创建字符串。例如，以下代码声明字符串：
String s;
利用String 类的构造方法可以创建字符串对象，String 类的构造方法有：
（1） String()，创建一个空字符串对象
例如：
s = new String();
（2） String(String str)，根据给定的字符串 str 创建字符串对象
例如，利用字符串常量创建字符串：
s = new String(“I am a student.”);
或简写成：
s = “I am a student.”;
字符串声明和创建也可一起完成：
Sting s = new String(“I am a student.”);
以下代码用字符串对象创建新字符串：
String newStr = new String(s);
以上代码使字符串newStr 与字符串 s 的内容相同，但是，它们是两个字符串。
（3） String(char a[])，根据字符数组a 创建一个字符串。
例如，代码：
char charArray[4] = {‘g’,’I’,’r’,’l’};
String str = new String(charArray);
所生成的字符串内容是”girl”。
（4） String (char a[], int startIndex, int charNum)，根据字符数组的起始下标位置以及字符个数创建字符串。
例如，以下代码输出 3456。
char a[] = {‘1’,’2’,’3’,’4’,’5’,’6’,’7’};
String s = new String (a,2,4);
System.out.println(s);

 



  to page 40 
























  

























 






































 





 


  








